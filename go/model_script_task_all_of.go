/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems/sdk

import (
	"encoding/json"
)

// ScriptTaskAllOf struct for ScriptTaskAllOf
type ScriptTaskAllOf struct {
	Type *string `json:"type,omitempty"`
	Script *string `json:"script,omitempty"`
}

// NewScriptTaskAllOf instantiates a new ScriptTaskAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptTaskAllOf() *ScriptTaskAllOf {
	this := ScriptTaskAllOf{}
	var type_ string = "job"
	this.Type = &type_
	return &this
}

// NewScriptTaskAllOfWithDefaults instantiates a new ScriptTaskAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptTaskAllOfWithDefaults() *ScriptTaskAllOf {
	this := ScriptTaskAllOf{}
	var type_ string = "job"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScriptTaskAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptTaskAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScriptTaskAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScriptTaskAllOf) SetType(v string) {
	o.Type = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *ScriptTaskAllOf) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptTaskAllOf) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *ScriptTaskAllOf) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *ScriptTaskAllOf) SetScript(v string) {
	o.Script = &v
}

func (o ScriptTaskAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	return json.Marshal(toSerialize)
}

type NullableScriptTaskAllOf struct {
	value *ScriptTaskAllOf
	isSet bool
}

func (v NullableScriptTaskAllOf) Get() *ScriptTaskAllOf {
	return v.value
}

func (v *NullableScriptTaskAllOf) Set(val *ScriptTaskAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptTaskAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptTaskAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptTaskAllOf(val *ScriptTaskAllOf) *NullableScriptTaskAllOf {
	return &NullableScriptTaskAllOf{value: val, isSet: true}
}

func (v NullableScriptTaskAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptTaskAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


