/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the Enrollment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Enrollment{}

// Enrollment struct for Enrollment
type Enrollment struct {
	Id *string `json:"id,omitempty"`
	PlatformPublicKey *string `json:"platform_public_key,omitempty"`
	DeviceCertificate *string `json:"device_certificate,omitempty"`
	Description *string `json:"description,omitempty"`
	Metadata map[string]map[string]interface{} `json:"metadata,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewEnrollment instantiates a new Enrollment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnrollment() *Enrollment {
	this := Enrollment{}
	return &this
}

// NewEnrollmentWithDefaults instantiates a new Enrollment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnrollmentWithDefaults() *Enrollment {
	this := Enrollment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Enrollment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Enrollment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Enrollment) SetId(v string) {
	o.Id = &v
}

// GetPlatformPublicKey returns the PlatformPublicKey field value if set, zero value otherwise.
func (o *Enrollment) GetPlatformPublicKey() string {
	if o == nil || IsNil(o.PlatformPublicKey) {
		var ret string
		return ret
	}
	return *o.PlatformPublicKey
}

// GetPlatformPublicKeyOk returns a tuple with the PlatformPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetPlatformPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PlatformPublicKey) {
		return nil, false
	}
	return o.PlatformPublicKey, true
}

// HasPlatformPublicKey returns a boolean if a field has been set.
func (o *Enrollment) HasPlatformPublicKey() bool {
	if o != nil && !IsNil(o.PlatformPublicKey) {
		return true
	}

	return false
}

// SetPlatformPublicKey gets a reference to the given string and assigns it to the PlatformPublicKey field.
func (o *Enrollment) SetPlatformPublicKey(v string) {
	o.PlatformPublicKey = &v
}

// GetDeviceCertificate returns the DeviceCertificate field value if set, zero value otherwise.
func (o *Enrollment) GetDeviceCertificate() string {
	if o == nil || IsNil(o.DeviceCertificate) {
		var ret string
		return ret
	}
	return *o.DeviceCertificate
}

// GetDeviceCertificateOk returns a tuple with the DeviceCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetDeviceCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceCertificate) {
		return nil, false
	}
	return o.DeviceCertificate, true
}

// HasDeviceCertificate returns a boolean if a field has been set.
func (o *Enrollment) HasDeviceCertificate() bool {
	if o != nil && !IsNil(o.DeviceCertificate) {
		return true
	}

	return false
}

// SetDeviceCertificate gets a reference to the given string and assigns it to the DeviceCertificate field.
func (o *Enrollment) SetDeviceCertificate(v string) {
	o.DeviceCertificate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Enrollment) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Enrollment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Enrollment) SetDescription(v string) {
	o.Description = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Enrollment) GetMetadata() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetMetadataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Enrollment) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]map[string]interface{} and assigns it to the Metadata field.
func (o *Enrollment) SetMetadata(v map[string]map[string]interface{}) {
	o.Metadata = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Enrollment) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Enrollment) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Enrollment) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Enrollment) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Enrollment) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Enrollment) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Enrollment) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o Enrollment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Enrollment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PlatformPublicKey) {
		toSerialize["platform_public_key"] = o.PlatformPublicKey
	}
	if !IsNil(o.DeviceCertificate) {
		toSerialize["device_certificate"] = o.DeviceCertificate
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableEnrollment struct {
	value *Enrollment
	isSet bool
}

func (v NullableEnrollment) Get() *Enrollment {
	return v.value
}

func (v *NullableEnrollment) Set(val *Enrollment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrollment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrollment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrollment(val *Enrollment) *NullableEnrollment {
	return &NullableEnrollment{value: val, isSet: true}
}

func (v NullableEnrollment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrollment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


