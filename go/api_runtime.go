/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// RuntimeApiService RuntimeApi service
type RuntimeApiService service

type ApiBuildRuntimeByIdRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
}

func (r ApiBuildRuntimeByIdRequest) XTenant(xTenant string) ApiBuildRuntimeByIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiBuildRuntimeByIdRequest) Execute() (Build, *_nethttp.Response, error) {
	return r.ApiService.BuildRuntimeByIdExecute(r)
}

/*
 * BuildRuntimeById Find runtime by Id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @return ApiBuildRuntimeByIdRequest
 */
func (a *RuntimeApiService) BuildRuntimeById(ctx _context.Context, runtimeId string) ApiBuildRuntimeByIdRequest {
	return ApiBuildRuntimeByIdRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
	}
}

/*
 * Execute executes the request
 * @return Build
 */
func (a *RuntimeApiService) BuildRuntimeByIdExecute(r ApiBuildRuntimeByIdRequest) (Build, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Build
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.BuildRuntimeById")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.build+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRuntimeRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtime *Runtime
}

func (r ApiCreateRuntimeRequest) XTenant(xTenant string) ApiCreateRuntimeRequest {
	r.xTenant = &xTenant
	return r
}
func (r ApiCreateRuntimeRequest) Runtime(runtime Runtime) ApiCreateRuntimeRequest {
	r.runtime = &runtime
	return r
}

func (r ApiCreateRuntimeRequest) Execute() (Runtime, *_nethttp.Response, error) {
	return r.ApiService.CreateRuntimeExecute(r)
}

/*
 * CreateRuntime Create runtime
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateRuntimeRequest
 */
func (a *RuntimeApiService) CreateRuntime(ctx _context.Context) ApiCreateRuntimeRequest {
	return ApiCreateRuntimeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Runtime
 */
func (a *RuntimeApiService) CreateRuntimeExecute(r ApiCreateRuntimeRequest) (Runtime, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Runtime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.CreateRuntime")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.runtime == nil {
		return localVarReturnValue, nil, reportError("runtime is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.graal.systems.v1.runtime+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.runtime+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	// body params
	localVarPostBody = r.runtime
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRuntimeByIdRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
}

func (r ApiDeleteRuntimeByIdRequest) XTenant(xTenant string) ApiDeleteRuntimeByIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiDeleteRuntimeByIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteRuntimeByIdExecute(r)
}

/*
 * DeleteRuntimeById Delete a runtime by an id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @return ApiDeleteRuntimeByIdRequest
 */
func (a *RuntimeApiService) DeleteRuntimeById(ctx _context.Context, runtimeId string) ApiDeleteRuntimeByIdRequest {
	return ApiDeleteRuntimeByIdRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
	}
}

/*
 * Execute executes the request
 */
func (a *RuntimeApiService) DeleteRuntimeByIdExecute(r ApiDeleteRuntimeByIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.DeleteRuntimeById")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFindBuildByRuntimeIdAndBuildIdRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
	buildId string
}

func (r ApiFindBuildByRuntimeIdAndBuildIdRequest) XTenant(xTenant string) ApiFindBuildByRuntimeIdAndBuildIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindBuildByRuntimeIdAndBuildIdRequest) Execute() (Build, *_nethttp.Response, error) {
	return r.ApiService.FindBuildByRuntimeIdAndBuildIdExecute(r)
}

/*
 * FindBuildByRuntimeIdAndBuildId Find the build by a runtimeId and a buildId
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @param buildId Id of the build
 * @return ApiFindBuildByRuntimeIdAndBuildIdRequest
 */
func (a *RuntimeApiService) FindBuildByRuntimeIdAndBuildId(ctx _context.Context, runtimeId string, buildId string) ApiFindBuildByRuntimeIdAndBuildIdRequest {
	return ApiFindBuildByRuntimeIdAndBuildIdRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
		buildId: buildId,
	}
}

/*
 * Execute executes the request
 * @return Build
 */
func (a *RuntimeApiService) FindBuildByRuntimeIdAndBuildIdExecute(r ApiFindBuildByRuntimeIdAndBuildIdRequest) (Build, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Build
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.FindBuildByRuntimeIdAndBuildId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}/builds/{buildId}"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"buildId"+"}", _neturl.PathEscape(parameterToString(r.buildId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.build+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindBuildsForRuntimeRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
}

func (r ApiFindBuildsForRuntimeRequest) XTenant(xTenant string) ApiFindBuildsForRuntimeRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindBuildsForRuntimeRequest) Execute() ([]Build, *_nethttp.Response, error) {
	return r.ApiService.FindBuildsForRuntimeExecute(r)
}

/*
 * FindBuildsForRuntime Retrieve all builds for a runtime
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @return ApiFindBuildsForRuntimeRequest
 */
func (a *RuntimeApiService) FindBuildsForRuntime(ctx _context.Context, runtimeId string) ApiFindBuildsForRuntimeRequest {
	return ApiFindBuildsForRuntimeRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
	}
}

/*
 * Execute executes the request
 * @return []Build
 */
func (a *RuntimeApiService) FindBuildsForRuntimeExecute(r ApiFindBuildsForRuntimeRequest) ([]Build, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Build
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.FindBuildsForRuntime")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.build+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindDependenciesByRuntimeIdAndVersionIdRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
	versionId string
}

func (r ApiFindDependenciesByRuntimeIdAndVersionIdRequest) XTenant(xTenant string) ApiFindDependenciesByRuntimeIdAndVersionIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindDependenciesByRuntimeIdAndVersionIdRequest) Execute() ([]Dependency, *_nethttp.Response, error) {
	return r.ApiService.FindDependenciesByRuntimeIdAndVersionIdExecute(r)
}

/*
 * FindDependenciesByRuntimeIdAndVersionId Find the dependencies by a runtimeId and a versionId
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @param versionId Id of the version
 * @return ApiFindDependenciesByRuntimeIdAndVersionIdRequest
 */
func (a *RuntimeApiService) FindDependenciesByRuntimeIdAndVersionId(ctx _context.Context, runtimeId string, versionId string) ApiFindDependenciesByRuntimeIdAndVersionIdRequest {
	return ApiFindDependenciesByRuntimeIdAndVersionIdRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
		versionId: versionId,
	}
}

/*
 * Execute executes the request
 * @return []Dependency
 */
func (a *RuntimeApiService) FindDependenciesByRuntimeIdAndVersionIdExecute(r ApiFindDependenciesByRuntimeIdAndVersionIdRequest) ([]Dependency, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Dependency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.FindDependenciesByRuntimeIdAndVersionId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}/versions/{versionId}/dependencies"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionId"+"}", _neturl.PathEscape(parameterToString(r.versionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.dependency+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindRuntimeByIdRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
}

func (r ApiFindRuntimeByIdRequest) XTenant(xTenant string) ApiFindRuntimeByIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindRuntimeByIdRequest) Execute() (Runtime, *_nethttp.Response, error) {
	return r.ApiService.FindRuntimeByIdExecute(r)
}

/*
 * FindRuntimeById Find runtime by Id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @return ApiFindRuntimeByIdRequest
 */
func (a *RuntimeApiService) FindRuntimeById(ctx _context.Context, runtimeId string) ApiFindRuntimeByIdRequest {
	return ApiFindRuntimeByIdRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
	}
}

/*
 * Execute executes the request
 * @return Runtime
 */
func (a *RuntimeApiService) FindRuntimeByIdExecute(r ApiFindRuntimeByIdRequest) (Runtime, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Runtime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.FindRuntimeById")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.runtime+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindRuntimesRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
}

func (r ApiFindRuntimesRequest) XTenant(xTenant string) ApiFindRuntimesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindRuntimesRequest) Execute() ([]Runtime, *_nethttp.Response, error) {
	return r.ApiService.FindRuntimesExecute(r)
}

/*
 * FindRuntimes Retrieve all runtimes
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFindRuntimesRequest
 */
func (a *RuntimeApiService) FindRuntimes(ctx _context.Context) ApiFindRuntimesRequest {
	return ApiFindRuntimesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []Runtime
 */
func (a *RuntimeApiService) FindRuntimesExecute(r ApiFindRuntimesRequest) ([]Runtime, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Runtime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.FindRuntimes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.runtime+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindVersionByRuntimeIdAndVersionIdRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
	versionId string
}

func (r ApiFindVersionByRuntimeIdAndVersionIdRequest) XTenant(xTenant string) ApiFindVersionByRuntimeIdAndVersionIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindVersionByRuntimeIdAndVersionIdRequest) Execute() (RuntimeVersion, *_nethttp.Response, error) {
	return r.ApiService.FindVersionByRuntimeIdAndVersionIdExecute(r)
}

/*
 * FindVersionByRuntimeIdAndVersionId Find the build by a runtimeId and a versionId
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @param versionId Id of the version
 * @return ApiFindVersionByRuntimeIdAndVersionIdRequest
 */
func (a *RuntimeApiService) FindVersionByRuntimeIdAndVersionId(ctx _context.Context, runtimeId string, versionId string) ApiFindVersionByRuntimeIdAndVersionIdRequest {
	return ApiFindVersionByRuntimeIdAndVersionIdRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
		versionId: versionId,
	}
}

/*
 * Execute executes the request
 * @return RuntimeVersion
 */
func (a *RuntimeApiService) FindVersionByRuntimeIdAndVersionIdExecute(r ApiFindVersionByRuntimeIdAndVersionIdRequest) (RuntimeVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RuntimeVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.FindVersionByRuntimeIdAndVersionId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}/versions/{versionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"versionId"+"}", _neturl.PathEscape(parameterToString(r.versionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.runtimeversion+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindVersionsForRuntimeRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
}

func (r ApiFindVersionsForRuntimeRequest) XTenant(xTenant string) ApiFindVersionsForRuntimeRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindVersionsForRuntimeRequest) Execute() ([]RuntimeVersion, *_nethttp.Response, error) {
	return r.ApiService.FindVersionsForRuntimeExecute(r)
}

/*
 * FindVersionsForRuntime Retrieve all versions for a runtime
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @return ApiFindVersionsForRuntimeRequest
 */
func (a *RuntimeApiService) FindVersionsForRuntime(ctx _context.Context, runtimeId string) ApiFindVersionsForRuntimeRequest {
	return ApiFindVersionsForRuntimeRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
	}
}

/*
 * Execute executes the request
 * @return []RuntimeVersion
 */
func (a *RuntimeApiService) FindVersionsForRuntimeExecute(r ApiFindVersionsForRuntimeRequest) ([]RuntimeVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []RuntimeVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.FindVersionsForRuntime")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.runtimeversion+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLogsForBuildRequest struct {
	ctx _context.Context
	ApiService *RuntimeApiService
	xTenant *string
	runtimeId string
	buildId string
	cursor *string
}

func (r ApiGetLogsForBuildRequest) XTenant(xTenant string) ApiGetLogsForBuildRequest {
	r.xTenant = &xTenant
	return r
}
func (r ApiGetLogsForBuildRequest) Cursor(cursor string) ApiGetLogsForBuildRequest {
	r.cursor = &cursor
	return r
}

func (r ApiGetLogsForBuildRequest) Execute() ([]LogEntry, *_nethttp.Response, error) {
	return r.ApiService.GetLogsForBuildExecute(r)
}

/*
 * GetLogsForBuild Get logs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param runtimeId Id of the runtime
 * @param buildId Id of the build
 * @return ApiGetLogsForBuildRequest
 */
func (a *RuntimeApiService) GetLogsForBuild(ctx _context.Context, runtimeId string, buildId string) ApiGetLogsForBuildRequest {
	return ApiGetLogsForBuildRequest{
		ApiService: a,
		ctx: ctx,
		runtimeId: runtimeId,
		buildId: buildId,
	}
}

/*
 * Execute executes the request
 * @return []LogEntry
 */
func (a *RuntimeApiService) GetLogsForBuildExecute(r ApiGetLogsForBuildRequest) ([]LogEntry, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []LogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuntimeApiService.GetLogsForBuild")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/runtimes/{runtimeId}/builds/{buildId}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"runtimeId"+"}", _neturl.PathEscape(parameterToString(r.runtimeId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"buildId"+"}", _neturl.PathEscape(parameterToString(r.buildId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.log+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
