/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Reaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reaction{}

// Reaction struct for Reaction
type Reaction struct {
	Id string `json:"id"`
	Count *int32 `json:"count,omitempty"`
	Users []User1 `json:"users,omitempty"`
}

type _Reaction Reaction

// NewReaction instantiates a new Reaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReaction(id string) *Reaction {
	this := Reaction{}
	this.Id = id
	return &this
}

// NewReactionWithDefaults instantiates a new Reaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionWithDefaults() *Reaction {
	this := Reaction{}
	return &this
}

// GetId returns the Id field value
func (o *Reaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Reaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Reaction) SetId(v string) {
	o.Id = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *Reaction) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reaction) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Reaction) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *Reaction) SetCount(v int32) {
	o.Count = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *Reaction) GetUsers() []User1 {
	if o == nil || IsNil(o.Users) {
		var ret []User1
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reaction) GetUsersOk() ([]User1, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *Reaction) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []User1 and assigns it to the Users field.
func (o *Reaction) SetUsers(v []User1) {
	o.Users = v
}

func (o Reaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

func (o *Reaction) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReaction := _Reaction{}

	err = json.Unmarshal(bytes, &varReaction)

	if err != nil {
		return err
	}

	*o = Reaction(varReaction)

	return err
}

type NullableReaction struct {
	value *Reaction
	isSet bool
}

func (v NullableReaction) Get() *Reaction {
	return v.value
}

func (v *NullableReaction) Set(val *Reaction) {
	v.value = val
	v.isSet = true
}

func (v NullableReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReaction(val *Reaction) *NullableReaction {
	return &NullableReaction{value: val, isSet: true}
}

func (v NullableReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


