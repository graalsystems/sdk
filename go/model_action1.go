/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// Action1 - Actions on the DAG.
type Action1 struct {
	CodeAction *CodeAction
	ValidityAction *ValidityAction
}

// CodeActionAsAction1 is a convenience function that returns CodeAction wrapped in Action1
func CodeActionAsAction1(v *CodeAction) Action1 {
	return Action1{
		CodeAction: v,
	}
}

// ValidityActionAsAction1 is a convenience function that returns ValidityAction wrapped in Action1
func ValidityActionAsAction1(v *ValidityAction) Action1 {
	return Action1{
		ValidityAction: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Action1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CodeAction
	err = newStrictDecoder(data).Decode(&dst.CodeAction)
	if err == nil {
		jsonCodeAction, _ := json.Marshal(dst.CodeAction)
		if string(jsonCodeAction) == "{}" { // empty struct
			dst.CodeAction = nil
		} else {
			match++
		}
	} else {
		dst.CodeAction = nil
	}

	// try to unmarshal data into ValidityAction
	err = newStrictDecoder(data).Decode(&dst.ValidityAction)
	if err == nil {
		jsonValidityAction, _ := json.Marshal(dst.ValidityAction)
		if string(jsonValidityAction) == "{}" { // empty struct
			dst.ValidityAction = nil
		} else {
			match++
		}
	} else {
		dst.ValidityAction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CodeAction = nil
		dst.ValidityAction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Action1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Action1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Action1) MarshalJSON() ([]byte, error) {
	if src.CodeAction != nil {
		return json.Marshal(&src.CodeAction)
	}

	if src.ValidityAction != nil {
		return json.Marshal(&src.ValidityAction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Action1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CodeAction != nil {
		return obj.CodeAction
	}

	if obj.ValidityAction != nil {
		return obj.ValidityAction
	}

	// all schemas are nil
	return nil
}

type NullableAction1 struct {
	value *Action1
	isSet bool
}

func (v NullableAction1) Get() *Action1 {
	return v.value
}

func (v *NullableAction1) Set(val *Action1) {
	v.value = val
	v.isSet = true
}

func (v NullableAction1) IsSet() bool {
	return v.isSet
}

func (v *NullableAction1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction1(val *Action1) *NullableAction1 {
	return &NullableAction1{value: val, isSet: true}
}

func (v NullableAction1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


