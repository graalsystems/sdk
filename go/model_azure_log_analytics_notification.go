/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems/sdk

import (
	"encoding/json"
)

// AzureLogAnalyticsNotification struct for AzureLogAnalyticsNotification
type AzureLogAnalyticsNotification struct {
	Notification
	Type *string `json:"type,omitempty"`
	Key *string `json:"key,omitempty"`
}

// NewAzureLogAnalyticsNotification instantiates a new AzureLogAnalyticsNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureLogAnalyticsNotification() *AzureLogAnalyticsNotification {
	this := AzureLogAnalyticsNotification{}
	var type_ string = "eventhub"
	this.Type = &type_
	return &this
}

// NewAzureLogAnalyticsNotificationWithDefaults instantiates a new AzureLogAnalyticsNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureLogAnalyticsNotificationWithDefaults() *AzureLogAnalyticsNotification {
	this := AzureLogAnalyticsNotification{}
	var type_ string = "eventhub"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AzureLogAnalyticsNotification) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureLogAnalyticsNotification) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AzureLogAnalyticsNotification) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AzureLogAnalyticsNotification) SetType(v string) {
	o.Type = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AzureLogAnalyticsNotification) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureLogAnalyticsNotification) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AzureLogAnalyticsNotification) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AzureLogAnalyticsNotification) SetKey(v string) {
	o.Key = &v
}

func (o AzureLogAnalyticsNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedNotification, errNotification := json.Marshal(o.Notification)
	if errNotification != nil {
		return []byte{}, errNotification
	}
	errNotification = json.Unmarshal([]byte(serializedNotification), &toSerialize)
	if errNotification != nil {
		return []byte{}, errNotification
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableAzureLogAnalyticsNotification struct {
	value *AzureLogAnalyticsNotification
	isSet bool
}

func (v NullableAzureLogAnalyticsNotification) Get() *AzureLogAnalyticsNotification {
	return v.value
}

func (v *NullableAzureLogAnalyticsNotification) Set(val *AzureLogAnalyticsNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureLogAnalyticsNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureLogAnalyticsNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureLogAnalyticsNotification(val *AzureLogAnalyticsNotification) *NullableAzureLogAnalyticsNotification {
	return &NullableAzureLogAnalyticsNotification{value: val, isSet: true}
}

func (v NullableAzureLogAnalyticsNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureLogAnalyticsNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


