/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Dag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dag{}

// Dag DagUnverified with verified schema and framework compatibility.
type Dag struct {
	// Identifier of the Directed Acyclic Graph (DAG).
	Id string `json:"id"`
	// List of tasks that compose the DAG.
	Tasks []TaskListInner `json:"tasks"`
}

type _Dag Dag

// NewDag instantiates a new Dag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDag(id string, tasks []TaskListInner) *Dag {
	this := Dag{}
	this.Id = id
	this.Tasks = tasks
	return &this
}

// NewDagWithDefaults instantiates a new Dag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDagWithDefaults() *Dag {
	this := Dag{}
	return &this
}

// GetId returns the Id field value
func (o *Dag) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Dag) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Dag) SetId(v string) {
	o.Id = v
}

// GetTasks returns the Tasks field value
func (o *Dag) GetTasks() []TaskListInner {
	if o == nil {
		var ret []TaskListInner
		return ret
	}

	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value
// and a boolean to check if the value has been set.
func (o *Dag) GetTasksOk() ([]TaskListInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tasks, true
}

// SetTasks sets field value
func (o *Dag) SetTasks(v []TaskListInner) {
	o.Tasks = v
}

func (o Dag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["tasks"] = o.Tasks
	return toSerialize, nil
}

func (o *Dag) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"tasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDag := _Dag{}

	err = json.Unmarshal(bytes, &varDag)

	if err != nil {
		return err
	}

	*o = Dag(varDag)

	return err
}

type NullableDag struct {
	value *Dag
	isSet bool
}

func (v NullableDag) Get() *Dag {
	return v.value
}

func (v *NullableDag) Set(val *Dag) {
	v.value = val
	v.isSet = true
}

func (v NullableDag) IsSet() bool {
	return v.isSet
}

func (v *NullableDag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDag(val *Dag) *NullableDag {
	return &NullableDag{value: val, isSet: true}
}

func (v NullableDag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


