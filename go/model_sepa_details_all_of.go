/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// SepaDetailsAllOf struct for SepaDetailsAllOf
type SepaDetailsAllOf struct {
	Type *string `json:"type,omitempty"`
	Iban *string `json:"iban,omitempty"`
	BankCode *string `json:"bank_code,omitempty"`
	Country *string `json:"country,omitempty"`
	BranchCode *string `json:"branch_code,omitempty"`
}

// NewSepaDetailsAllOf instantiates a new SepaDetailsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSepaDetailsAllOf() *SepaDetailsAllOf {
	this := SepaDetailsAllOf{}
	var type_ string = "sepa"
	this.Type = &type_
	return &this
}

// NewSepaDetailsAllOfWithDefaults instantiates a new SepaDetailsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSepaDetailsAllOfWithDefaults() *SepaDetailsAllOf {
	this := SepaDetailsAllOf{}
	var type_ string = "sepa"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SepaDetailsAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetailsAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SepaDetailsAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SepaDetailsAllOf) SetType(v string) {
	o.Type = &v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *SepaDetailsAllOf) GetIban() string {
	if o == nil || o.Iban == nil {
		var ret string
		return ret
	}
	return *o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetailsAllOf) GetIbanOk() (*string, bool) {
	if o == nil || o.Iban == nil {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *SepaDetailsAllOf) HasIban() bool {
	if o != nil && o.Iban != nil {
		return true
	}

	return false
}

// SetIban gets a reference to the given string and assigns it to the Iban field.
func (o *SepaDetailsAllOf) SetIban(v string) {
	o.Iban = &v
}

// GetBankCode returns the BankCode field value if set, zero value otherwise.
func (o *SepaDetailsAllOf) GetBankCode() string {
	if o == nil || o.BankCode == nil {
		var ret string
		return ret
	}
	return *o.BankCode
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetailsAllOf) GetBankCodeOk() (*string, bool) {
	if o == nil || o.BankCode == nil {
		return nil, false
	}
	return o.BankCode, true
}

// HasBankCode returns a boolean if a field has been set.
func (o *SepaDetailsAllOf) HasBankCode() bool {
	if o != nil && o.BankCode != nil {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given string and assigns it to the BankCode field.
func (o *SepaDetailsAllOf) SetBankCode(v string) {
	o.BankCode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SepaDetailsAllOf) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetailsAllOf) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SepaDetailsAllOf) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SepaDetailsAllOf) SetCountry(v string) {
	o.Country = &v
}

// GetBranchCode returns the BranchCode field value if set, zero value otherwise.
func (o *SepaDetailsAllOf) GetBranchCode() string {
	if o == nil || o.BranchCode == nil {
		var ret string
		return ret
	}
	return *o.BranchCode
}

// GetBranchCodeOk returns a tuple with the BranchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetailsAllOf) GetBranchCodeOk() (*string, bool) {
	if o == nil || o.BranchCode == nil {
		return nil, false
	}
	return o.BranchCode, true
}

// HasBranchCode returns a boolean if a field has been set.
func (o *SepaDetailsAllOf) HasBranchCode() bool {
	if o != nil && o.BranchCode != nil {
		return true
	}

	return false
}

// SetBranchCode gets a reference to the given string and assigns it to the BranchCode field.
func (o *SepaDetailsAllOf) SetBranchCode(v string) {
	o.BranchCode = &v
}

func (o SepaDetailsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Iban != nil {
		toSerialize["iban"] = o.Iban
	}
	if o.BankCode != nil {
		toSerialize["bank_code"] = o.BankCode
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.BranchCode != nil {
		toSerialize["branch_code"] = o.BranchCode
	}
	return json.Marshal(toSerialize)
}

type NullableSepaDetailsAllOf struct {
	value *SepaDetailsAllOf
	isSet bool
}

func (v NullableSepaDetailsAllOf) Get() *SepaDetailsAllOf {
	return v.value
}

func (v *NullableSepaDetailsAllOf) Set(val *SepaDetailsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSepaDetailsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSepaDetailsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSepaDetailsAllOf(val *SepaDetailsAllOf) *NullableSepaDetailsAllOf {
	return &NullableSepaDetailsAllOf{value: val, isSet: true}
}

func (v NullableSepaDetailsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSepaDetailsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


