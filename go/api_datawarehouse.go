/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DatawarehouseAPIService DatawarehouseAPI service
type DatawarehouseAPIService service

type ApiCreateDataWarehouseRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	dataWarehouse *DataWarehouse
}

func (r ApiCreateDataWarehouseRequest) XTenant(xTenant string) ApiCreateDataWarehouseRequest {
	r.xTenant = &xTenant
	return r
}

// The datawarehouse to be created
func (r ApiCreateDataWarehouseRequest) DataWarehouse(dataWarehouse DataWarehouse) ApiCreateDataWarehouseRequest {
	r.dataWarehouse = &dataWarehouse
	return r
}

func (r ApiCreateDataWarehouseRequest) Execute() (*DataWarehouse, *http.Response, error) {
	return r.ApiService.CreateDataWarehouseExecute(r)
}

/*
CreateDataWarehouse Create datawarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDataWarehouseRequest
*/
func (a *DatawarehouseAPIService) CreateDataWarehouse(ctx context.Context) ApiCreateDataWarehouseRequest {
	return ApiCreateDataWarehouseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataWarehouse
func (a *DatawarehouseAPIService) CreateDataWarehouseExecute(r ApiCreateDataWarehouseRequest) (*DataWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.CreateDataWarehouse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.dataWarehouse == nil {
		return localVarReturnValue, nil, reportError("dataWarehouse is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.graal.systems.v1.datawarehouse+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.datawarehouse+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	// body params
	localVarPostBody = r.dataWarehouse
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDataWarehouseByIdRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	datawarehouseId string
}

func (r ApiDeleteDataWarehouseByIdRequest) XTenant(xTenant string) ApiDeleteDataWarehouseByIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiDeleteDataWarehouseByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDataWarehouseByIdExecute(r)
}

/*
DeleteDataWarehouseById Delete a datawarehouse by an id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datawarehouseId Id of the datawarehouse
 @return ApiDeleteDataWarehouseByIdRequest
*/
func (a *DatawarehouseAPIService) DeleteDataWarehouseById(ctx context.Context, datawarehouseId string) ApiDeleteDataWarehouseByIdRequest {
	return ApiDeleteDataWarehouseByIdRequest{
		ApiService: a,
		ctx: ctx,
		datawarehouseId: datawarehouseId,
	}
}

// Execute executes the request
func (a *DatawarehouseAPIService) DeleteDataWarehouseByIdExecute(r ApiDeleteDataWarehouseByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.DeleteDataWarehouseById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses/{datawarehouseId}"
	localVarPath = strings.Replace(localVarPath, "{"+"datawarehouseId"+"}", url.PathEscape(parameterValueToString(r.datawarehouseId, "datawarehouseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFindChangesRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	datawarehouseId string
	page *int32
	size *int32
}

func (r ApiFindChangesRequest) XTenant(xTenant string) ApiFindChangesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindChangesRequest) Page(page int32) ApiFindChangesRequest {
	r.page = &page
	return r
}

func (r ApiFindChangesRequest) Size(size int32) ApiFindChangesRequest {
	r.size = &size
	return r
}

func (r ApiFindChangesRequest) Execute() (*ChangePage, *http.Response, error) {
	return r.ApiService.FindChangesExecute(r)
}

/*
FindChanges Find changes by datawarehouse id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datawarehouseId Id of the datawarehouse
 @return ApiFindChangesRequest
*/
func (a *DatawarehouseAPIService) FindChanges(ctx context.Context, datawarehouseId string) ApiFindChangesRequest {
	return ApiFindChangesRequest{
		ApiService: a,
		ctx: ctx,
		datawarehouseId: datawarehouseId,
	}
}

// Execute executes the request
//  @return ChangePage
func (a *DatawarehouseAPIService) FindChangesExecute(r ApiFindChangesRequest) (*ChangePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.FindChanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses/{datawarehouseId}/changes"
	localVarPath = strings.Replace(localVarPath, "{"+"datawarehouseId"+"}", url.PathEscape(parameterValueToString(r.datawarehouseId, "datawarehouseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 200
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.change+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindDataWarehouseByIdRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	datawarehouseId string
}

func (r ApiFindDataWarehouseByIdRequest) XTenant(xTenant string) ApiFindDataWarehouseByIdRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindDataWarehouseByIdRequest) Execute() (*DataWarehouse, *http.Response, error) {
	return r.ApiService.FindDataWarehouseByIdExecute(r)
}

/*
FindDataWarehouseById Find datawarehouse by Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datawarehouseId Id of the datawarehouse
 @return ApiFindDataWarehouseByIdRequest
*/
func (a *DatawarehouseAPIService) FindDataWarehouseById(ctx context.Context, datawarehouseId string) ApiFindDataWarehouseByIdRequest {
	return ApiFindDataWarehouseByIdRequest{
		ApiService: a,
		ctx: ctx,
		datawarehouseId: datawarehouseId,
	}
}

// Execute executes the request
//  @return DataWarehouse
func (a *DatawarehouseAPIService) FindDataWarehouseByIdExecute(r ApiFindDataWarehouseByIdRequest) (*DataWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.FindDataWarehouseById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses/{datawarehouseId}"
	localVarPath = strings.Replace(localVarPath, "{"+"datawarehouseId"+"}", url.PathEscape(parameterValueToString(r.datawarehouseId, "datawarehouseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.datawarehouse+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindDataWarehousesRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	page *int32
	size *int32
}

func (r ApiFindDataWarehousesRequest) XTenant(xTenant string) ApiFindDataWarehousesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindDataWarehousesRequest) Page(page int32) ApiFindDataWarehousesRequest {
	r.page = &page
	return r
}

func (r ApiFindDataWarehousesRequest) Size(size int32) ApiFindDataWarehousesRequest {
	r.size = &size
	return r
}

func (r ApiFindDataWarehousesRequest) Execute() (*DataWarehousePage, *http.Response, error) {
	return r.ApiService.FindDataWarehousesExecute(r)
}

/*
FindDataWarehouses Retrieve all datawarehouses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindDataWarehousesRequest
*/
func (a *DatawarehouseAPIService) FindDataWarehouses(ctx context.Context) ApiFindDataWarehousesRequest {
	return ApiFindDataWarehousesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DataWarehousePage
func (a *DatawarehouseAPIService) FindDataWarehousesExecute(r ApiFindDataWarehousesRequest) (*DataWarehousePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataWarehousePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.FindDataWarehouses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 200
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.datawarehouse+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindTablesRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	datawarehouseId string
	page *int32
	size *int32
}

func (r ApiFindTablesRequest) XTenant(xTenant string) ApiFindTablesRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindTablesRequest) Page(page int32) ApiFindTablesRequest {
	r.page = &page
	return r
}

func (r ApiFindTablesRequest) Size(size int32) ApiFindTablesRequest {
	r.size = &size
	return r
}

func (r ApiFindTablesRequest) Execute() ([]Table, *http.Response, error) {
	return r.ApiService.FindTablesExecute(r)
}

/*
FindTables Find tables by datawarehouse id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datawarehouseId Id of the datawarehouse
 @return ApiFindTablesRequest
*/
func (a *DatawarehouseAPIService) FindTables(ctx context.Context, datawarehouseId string) ApiFindTablesRequest {
	return ApiFindTablesRequest{
		ApiService: a,
		ctx: ctx,
		datawarehouseId: datawarehouseId,
	}
}

// Execute executes the request
//  @return []Table
func (a *DatawarehouseAPIService) FindTablesExecute(r ApiFindTablesRequest) ([]Table, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Table
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.FindTables")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses/{datawarehouseId}/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"datawarehouseId"+"}", url.PathEscape(parameterValueToString(r.datawarehouseId, "datawarehouseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	} else {
		var defaultValue int32 = 200
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.table+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLogsForDatawarehouseRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	datawarehouseId string
	cursor *string
}

func (r ApiGetLogsForDatawarehouseRequest) XTenant(xTenant string) ApiGetLogsForDatawarehouseRequest {
	r.xTenant = &xTenant
	return r
}

// The cursor
func (r ApiGetLogsForDatawarehouseRequest) Cursor(cursor string) ApiGetLogsForDatawarehouseRequest {
	r.cursor = &cursor
	return r
}

func (r ApiGetLogsForDatawarehouseRequest) Execute() ([]LogEntry, *http.Response, error) {
	return r.ApiService.GetLogsForDatawarehouseExecute(r)
}

/*
GetLogsForDatawarehouse Get logs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datawarehouseId Id of the datawarehouse
 @return ApiGetLogsForDatawarehouseRequest
*/
func (a *DatawarehouseAPIService) GetLogsForDatawarehouse(ctx context.Context, datawarehouseId string) ApiGetLogsForDatawarehouseRequest {
	return ApiGetLogsForDatawarehouseRequest{
		ApiService: a,
		ctx: ctx,
		datawarehouseId: datawarehouseId,
	}
}

// Execute executes the request
//  @return []LogEntry
func (a *DatawarehouseAPIService) GetLogsForDatawarehouseExecute(r ApiGetLogsForDatawarehouseRequest) ([]LogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.GetLogsForDatawarehouse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses/{datawarehouseId}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"datawarehouseId"+"}", url.PathEscape(parameterValueToString(r.datawarehouseId, "datawarehouseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.log+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDataWarehouseRequest struct {
	ctx context.Context
	ApiService *DatawarehouseAPIService
	xTenant *string
	datawarehouseId string
	patch *[]Patch
}

func (r ApiUpdateDataWarehouseRequest) XTenant(xTenant string) ApiUpdateDataWarehouseRequest {
	r.xTenant = &xTenant
	return r
}

// The patch
func (r ApiUpdateDataWarehouseRequest) Patch(patch []Patch) ApiUpdateDataWarehouseRequest {
	r.patch = &patch
	return r
}

func (r ApiUpdateDataWarehouseRequest) Execute() (*DataWarehouse, *http.Response, error) {
	return r.ApiService.UpdateDataWarehouseExecute(r)
}

/*
UpdateDataWarehouse Update a datawarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param datawarehouseId Id of the datawarehouse
 @return ApiUpdateDataWarehouseRequest
*/
func (a *DatawarehouseAPIService) UpdateDataWarehouse(ctx context.Context, datawarehouseId string) ApiUpdateDataWarehouseRequest {
	return ApiUpdateDataWarehouseRequest{
		ApiService: a,
		ctx: ctx,
		datawarehouseId: datawarehouseId,
	}
}

// Execute executes the request
//  @return DataWarehouse
func (a *DatawarehouseAPIService) UpdateDataWarehouseExecute(r ApiUpdateDataWarehouseRequest) (*DataWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DataWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatawarehouseAPIService.UpdateDataWarehouse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/datawarehouses/{datawarehouseId}"
	localVarPath = strings.Replace(localVarPath, "{"+"datawarehouseId"+"}", url.PathEscape(parameterValueToString(r.datawarehouseId, "datawarehouseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.patch == nil {
		return localVarReturnValue, nil, reportError("patch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.datawarehouse+json", "application/vnd.graal.systems.v1.error+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	// body params
	localVarPostBody = r.patch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
