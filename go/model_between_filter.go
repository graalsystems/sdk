/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the BetweenFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BetweenFilter{}

// BetweenFilter Filter values that are in a range/between two values.  Attributes ---------- type : RelationalOperatorType     Type of the filter. right : list     Values below and above.  Methods ------- get_value()     Get the value of the filter operator
type BetweenFilter struct {
	// Left operator for filter.
	Left string `json:"left"`
	Right []string `json:"right"`
	// Operator for BETWEEN filter (range).
	Type *string `json:"type,omitempty"`
}

type _BetweenFilter BetweenFilter

// NewBetweenFilter instantiates a new BetweenFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBetweenFilter(left string, right []string) *BetweenFilter {
	this := BetweenFilter{}
	this.Left = left
	this.Right = right
	var type_ string = "between"
	this.Type = &type_
	return &this
}

// NewBetweenFilterWithDefaults instantiates a new BetweenFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBetweenFilterWithDefaults() *BetweenFilter {
	this := BetweenFilter{}
	var type_ string = "between"
	this.Type = &type_
	return &this
}

// GetLeft returns the Left field value
func (o *BetweenFilter) GetLeft() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Left
}

// GetLeftOk returns a tuple with the Left field value
// and a boolean to check if the value has been set.
func (o *BetweenFilter) GetLeftOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Left, true
}

// SetLeft sets field value
func (o *BetweenFilter) SetLeft(v string) {
	o.Left = v
}

// GetRight returns the Right field value
func (o *BetweenFilter) GetRight() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Right
}

// GetRightOk returns a tuple with the Right field value
// and a boolean to check if the value has been set.
func (o *BetweenFilter) GetRightOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Right, true
}

// SetRight sets field value
func (o *BetweenFilter) SetRight(v []string) {
	o.Right = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BetweenFilter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BetweenFilter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BetweenFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BetweenFilter) SetType(v string) {
	o.Type = &v
}

func (o BetweenFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BetweenFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["left"] = o.Left
	toSerialize["right"] = o.Right
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *BetweenFilter) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"left",
		"right",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBetweenFilter := _BetweenFilter{}

	err = json.Unmarshal(bytes, &varBetweenFilter)

	if err != nil {
		return err
	}

	*o = BetweenFilter(varBetweenFilter)

	return err
}

type NullableBetweenFilter struct {
	value *BetweenFilter
	isSet bool
}

func (v NullableBetweenFilter) Get() *BetweenFilter {
	return v.value
}

func (v *NullableBetweenFilter) Set(val *BetweenFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableBetweenFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableBetweenFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetweenFilter(val *BetweenFilter) *NullableBetweenFilter {
	return &NullableBetweenFilter{value: val, isSet: true}
}

func (v NullableBetweenFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetweenFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


