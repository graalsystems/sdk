/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AirflowOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AirflowOptions{}

// AirflowOptions struct for AirflowOptions
type AirflowOptions struct {
	Options
	Type *string `json:"type,omitempty"`
}

// NewAirflowOptions instantiates a new AirflowOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirflowOptions() *AirflowOptions {
	this := AirflowOptions{}
	var type_ string = "airflow"
	this.Type = &type_
	return &this
}

// NewAirflowOptionsWithDefaults instantiates a new AirflowOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirflowOptionsWithDefaults() *AirflowOptions {
	this := AirflowOptions{}
	var type_ string = "airflow"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AirflowOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirflowOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AirflowOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AirflowOptions) SetType(v string) {
	o.Type = &v
}

func (o AirflowOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AirflowOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedOptions, errOptions := json.Marshal(o.Options)
	if errOptions != nil {
		return map[string]interface{}{}, errOptions
	}
	errOptions = json.Unmarshal([]byte(serializedOptions), &toSerialize)
	if errOptions != nil {
		return map[string]interface{}{}, errOptions
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAirflowOptions struct {
	value *AirflowOptions
	isSet bool
}

func (v NullableAirflowOptions) Get() *AirflowOptions {
	return v.value
}

func (v *NullableAirflowOptions) Set(val *AirflowOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableAirflowOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableAirflowOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirflowOptions(val *AirflowOptions) *NullableAirflowOptions {
	return &NullableAirflowOptions{value: val, isSet: true}
}

func (v NullableAirflowOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirflowOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


