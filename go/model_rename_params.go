/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RenameParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameParams{}

// RenameParams struct for RenameParams
type RenameParams struct {
	// Name of the column to rename.
	OldName string `json:"old_name"`
	// Replacement name for the column.
	NewName string `json:"new_name"`
}

type _RenameParams RenameParams

// NewRenameParams instantiates a new RenameParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameParams(oldName string, newName string) *RenameParams {
	this := RenameParams{}
	this.OldName = oldName
	this.NewName = newName
	return &this
}

// NewRenameParamsWithDefaults instantiates a new RenameParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameParamsWithDefaults() *RenameParams {
	this := RenameParams{}
	return &this
}

// GetOldName returns the OldName field value
func (o *RenameParams) GetOldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldName
}

// GetOldNameOk returns a tuple with the OldName field value
// and a boolean to check if the value has been set.
func (o *RenameParams) GetOldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldName, true
}

// SetOldName sets field value
func (o *RenameParams) SetOldName(v string) {
	o.OldName = v
}

// GetNewName returns the NewName field value
func (o *RenameParams) GetNewName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value
// and a boolean to check if the value has been set.
func (o *RenameParams) GetNewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewName, true
}

// SetNewName sets field value
func (o *RenameParams) SetNewName(v string) {
	o.NewName = v
}

func (o RenameParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["old_name"] = o.OldName
	toSerialize["new_name"] = o.NewName
	return toSerialize, nil
}

func (o *RenameParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"old_name",
		"new_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRenameParams := _RenameParams{}

	err = json.Unmarshal(bytes, &varRenameParams)

	if err != nil {
		return err
	}

	*o = RenameParams(varRenameParams)

	return err
}

type NullableRenameParams struct {
	value *RenameParams
	isSet bool
}

func (v NullableRenameParams) Get() *RenameParams {
	return v.value
}

func (v *NullableRenameParams) Set(val *RenameParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameParams(val *RenameParams) *NullableRenameParams {
	return &NullableRenameParams{value: val, isSet: true}
}

func (v NullableRenameParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


