/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ReadTaskParameters - Parameters of the read task.
type ReadTaskParameters struct {
	LoadModelParams *LoadModelParams
	ReadFileParams *ReadFileParams
	ReadSQLParams *ReadSQLParams
}

// LoadModelParamsAsReadTaskParameters is a convenience function that returns LoadModelParams wrapped in ReadTaskParameters
func LoadModelParamsAsReadTaskParameters(v *LoadModelParams) ReadTaskParameters {
	return ReadTaskParameters{
		LoadModelParams: v,
	}
}

// ReadFileParamsAsReadTaskParameters is a convenience function that returns ReadFileParams wrapped in ReadTaskParameters
func ReadFileParamsAsReadTaskParameters(v *ReadFileParams) ReadTaskParameters {
	return ReadTaskParameters{
		ReadFileParams: v,
	}
}

// ReadSQLParamsAsReadTaskParameters is a convenience function that returns ReadSQLParams wrapped in ReadTaskParameters
func ReadSQLParamsAsReadTaskParameters(v *ReadSQLParams) ReadTaskParameters {
	return ReadTaskParameters{
		ReadSQLParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReadTaskParameters) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LoadModelParams
	err = newStrictDecoder(data).Decode(&dst.LoadModelParams)
	if err == nil {
		jsonLoadModelParams, _ := json.Marshal(dst.LoadModelParams)
		if string(jsonLoadModelParams) == "{}" { // empty struct
			dst.LoadModelParams = nil
		} else {
			match++
		}
	} else {
		dst.LoadModelParams = nil
	}

	// try to unmarshal data into ReadFileParams
	err = newStrictDecoder(data).Decode(&dst.ReadFileParams)
	if err == nil {
		jsonReadFileParams, _ := json.Marshal(dst.ReadFileParams)
		if string(jsonReadFileParams) == "{}" { // empty struct
			dst.ReadFileParams = nil
		} else {
			match++
		}
	} else {
		dst.ReadFileParams = nil
	}

	// try to unmarshal data into ReadSQLParams
	err = newStrictDecoder(data).Decode(&dst.ReadSQLParams)
	if err == nil {
		jsonReadSQLParams, _ := json.Marshal(dst.ReadSQLParams)
		if string(jsonReadSQLParams) == "{}" { // empty struct
			dst.ReadSQLParams = nil
		} else {
			match++
		}
	} else {
		dst.ReadSQLParams = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LoadModelParams = nil
		dst.ReadFileParams = nil
		dst.ReadSQLParams = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReadTaskParameters)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReadTaskParameters)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReadTaskParameters) MarshalJSON() ([]byte, error) {
	if src.LoadModelParams != nil {
		return json.Marshal(&src.LoadModelParams)
	}

	if src.ReadFileParams != nil {
		return json.Marshal(&src.ReadFileParams)
	}

	if src.ReadSQLParams != nil {
		return json.Marshal(&src.ReadSQLParams)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReadTaskParameters) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LoadModelParams != nil {
		return obj.LoadModelParams
	}

	if obj.ReadFileParams != nil {
		return obj.ReadFileParams
	}

	if obj.ReadSQLParams != nil {
		return obj.ReadSQLParams
	}

	// all schemas are nil
	return nil
}

type NullableReadTaskParameters struct {
	value *ReadTaskParameters
	isSet bool
}

func (v NullableReadTaskParameters) Get() *ReadTaskParameters {
	return v.value
}

func (v *NullableReadTaskParameters) Set(val *ReadTaskParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableReadTaskParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableReadTaskParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadTaskParameters(val *ReadTaskParameters) *NullableReadTaskParameters {
	return &NullableReadTaskParameters{value: val, isSet: true}
}

func (v NullableReadTaskParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadTaskParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


