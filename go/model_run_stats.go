/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems/sdk

import (
	"encoding/json"
)

// RunStats struct for RunStats
type RunStats struct {
	Total *float32 `json:"total,omitempty"`
	Completed *float32 `json:"completed,omitempty"`
	Failed *float32 `json:"failed,omitempty"`
	Unknown *float32 `json:"unknown,omitempty"`
	Running *float32 `json:"running,omitempty"`
}

// NewRunStats instantiates a new RunStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunStats() *RunStats {
	this := RunStats{}
	return &this
}

// NewRunStatsWithDefaults instantiates a new RunStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunStatsWithDefaults() *RunStats {
	this := RunStats{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *RunStats) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStats) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *RunStats) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *RunStats) SetTotal(v float32) {
	o.Total = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *RunStats) GetCompleted() float32 {
	if o == nil || o.Completed == nil {
		var ret float32
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStats) GetCompletedOk() (*float32, bool) {
	if o == nil || o.Completed == nil {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *RunStats) HasCompleted() bool {
	if o != nil && o.Completed != nil {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given float32 and assigns it to the Completed field.
func (o *RunStats) SetCompleted(v float32) {
	o.Completed = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *RunStats) GetFailed() float32 {
	if o == nil || o.Failed == nil {
		var ret float32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStats) GetFailedOk() (*float32, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *RunStats) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given float32 and assigns it to the Failed field.
func (o *RunStats) SetFailed(v float32) {
	o.Failed = &v
}

// GetUnknown returns the Unknown field value if set, zero value otherwise.
func (o *RunStats) GetUnknown() float32 {
	if o == nil || o.Unknown == nil {
		var ret float32
		return ret
	}
	return *o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStats) GetUnknownOk() (*float32, bool) {
	if o == nil || o.Unknown == nil {
		return nil, false
	}
	return o.Unknown, true
}

// HasUnknown returns a boolean if a field has been set.
func (o *RunStats) HasUnknown() bool {
	if o != nil && o.Unknown != nil {
		return true
	}

	return false
}

// SetUnknown gets a reference to the given float32 and assigns it to the Unknown field.
func (o *RunStats) SetUnknown(v float32) {
	o.Unknown = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *RunStats) GetRunning() float32 {
	if o == nil || o.Running == nil {
		var ret float32
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunStats) GetRunningOk() (*float32, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *RunStats) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given float32 and assigns it to the Running field.
func (o *RunStats) SetRunning(v float32) {
	o.Running = &v
}

func (o RunStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Completed != nil {
		toSerialize["completed"] = o.Completed
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	if o.Unknown != nil {
		toSerialize["unknown"] = o.Unknown
	}
	if o.Running != nil {
		toSerialize["running"] = o.Running
	}
	return json.Marshal(toSerialize)
}

type NullableRunStats struct {
	value *RunStats
	isSet bool
}

func (v NullableRunStats) Get() *RunStats {
	return v.value
}

func (v *NullableRunStats) Set(val *RunStats) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStats) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStats(val *RunStats) *NullableRunStats {
	return &NullableRunStats{value: val, isSet: true}
}

func (v NullableRunStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


