/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
)

// checks if the Capacity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Capacity{}

// Capacity struct for Capacity
type Capacity struct {
	Min *float32 `json:"min,omitempty"`
	Max *float32 `json:"max,omitempty"`
	Current *float32 `json:"current,omitempty"`
}

// NewCapacity instantiates a new Capacity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapacity() *Capacity {
	this := Capacity{}
	return &this
}

// NewCapacityWithDefaults instantiates a new Capacity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityWithDefaults() *Capacity {
	this := Capacity{}
	return &this
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *Capacity) GetMin() float32 {
	if o == nil || IsNil(o.Min) {
		var ret float32
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Capacity) GetMinOk() (*float32, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *Capacity) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float32 and assigns it to the Min field.
func (o *Capacity) SetMin(v float32) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *Capacity) GetMax() float32 {
	if o == nil || IsNil(o.Max) {
		var ret float32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Capacity) GetMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *Capacity) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float32 and assigns it to the Max field.
func (o *Capacity) SetMax(v float32) {
	o.Max = &v
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *Capacity) GetCurrent() float32 {
	if o == nil || IsNil(o.Current) {
		var ret float32
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Capacity) GetCurrentOk() (*float32, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *Capacity) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given float32 and assigns it to the Current field.
func (o *Capacity) SetCurrent(v float32) {
	o.Current = &v
}

func (o Capacity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Capacity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}
	return toSerialize, nil
}

type NullableCapacity struct {
	value *Capacity
	isSet bool
}

func (v NullableCapacity) Get() *Capacity {
	return v.value
}

func (v *NullableCapacity) Set(val *Capacity) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacity) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacity(val *Capacity) *NullableCapacity {
	return &NullableCapacity{value: val, isSet: true}
}

func (v NullableCapacity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


