/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// AggregationsInner struct for AggregationsInner
type AggregationsInner struct {
	CountParams *CountParams
	MaxParams *MaxParams
	MeanParams *MeanParams
	MinParams *MinParams
	SumParams *SumParams
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AggregationsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CountParams
	err = json.Unmarshal(data, &dst.CountParams);
	if err == nil {
		jsonCountParams, _ := json.Marshal(dst.CountParams)
		if string(jsonCountParams) == "{}" { // empty struct
			dst.CountParams = nil
		} else {
			return nil // data stored in dst.CountParams, return on the first match
		}
	} else {
		dst.CountParams = nil
	}

	// try to unmarshal JSON data into MaxParams
	err = json.Unmarshal(data, &dst.MaxParams);
	if err == nil {
		jsonMaxParams, _ := json.Marshal(dst.MaxParams)
		if string(jsonMaxParams) == "{}" { // empty struct
			dst.MaxParams = nil
		} else {
			return nil // data stored in dst.MaxParams, return on the first match
		}
	} else {
		dst.MaxParams = nil
	}

	// try to unmarshal JSON data into MeanParams
	err = json.Unmarshal(data, &dst.MeanParams);
	if err == nil {
		jsonMeanParams, _ := json.Marshal(dst.MeanParams)
		if string(jsonMeanParams) == "{}" { // empty struct
			dst.MeanParams = nil
		} else {
			return nil // data stored in dst.MeanParams, return on the first match
		}
	} else {
		dst.MeanParams = nil
	}

	// try to unmarshal JSON data into MinParams
	err = json.Unmarshal(data, &dst.MinParams);
	if err == nil {
		jsonMinParams, _ := json.Marshal(dst.MinParams)
		if string(jsonMinParams) == "{}" { // empty struct
			dst.MinParams = nil
		} else {
			return nil // data stored in dst.MinParams, return on the first match
		}
	} else {
		dst.MinParams = nil
	}

	// try to unmarshal JSON data into SumParams
	err = json.Unmarshal(data, &dst.SumParams);
	if err == nil {
		jsonSumParams, _ := json.Marshal(dst.SumParams)
		if string(jsonSumParams) == "{}" { // empty struct
			dst.SumParams = nil
		} else {
			return nil // data stored in dst.SumParams, return on the first match
		}
	} else {
		dst.SumParams = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AggregationsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AggregationsInner) MarshalJSON() ([]byte, error) {
	if src.CountParams != nil {
		return json.Marshal(&src.CountParams)
	}

	if src.MaxParams != nil {
		return json.Marshal(&src.MaxParams)
	}

	if src.MeanParams != nil {
		return json.Marshal(&src.MeanParams)
	}

	if src.MinParams != nil {
		return json.Marshal(&src.MinParams)
	}

	if src.SumParams != nil {
		return json.Marshal(&src.SumParams)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAggregationsInner struct {
	value *AggregationsInner
	isSet bool
}

func (v NullableAggregationsInner) Get() *AggregationsInner {
	return v.value
}

func (v *NullableAggregationsInner) Set(val *AggregationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationsInner(val *AggregationsInner) *NullableAggregationsInner {
	return &NullableAggregationsInner{value: val, isSet: true}
}

func (v NullableAggregationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


