/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// CostStats struct for CostStats
type CostStats struct {
	Total *float64 `json:"total,omitempty"`
	Cumulative *[]float64 `json:"cumulative,omitempty"`
	Budget *[]float64 `json:"budget,omitempty"`
	BudgetLowerProjection *[]float64 `json:"budget_lower_projection,omitempty"`
	BudgetUpperProjection *[]float64 `json:"budget_upper_projection,omitempty"`
	Period *[]time.Time `json:"period,omitempty"`
	ProjectionPeriod *[]time.Time `json:"projection_period,omitempty"`
	Type *string `json:"type,omitempty"`
	ByType *map[string]float64 `json:"by_type,omitempty"`
}

// NewCostStats instantiates a new CostStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostStats() *CostStats {
	this := CostStats{}
	return &this
}

// NewCostStatsWithDefaults instantiates a new CostStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostStatsWithDefaults() *CostStats {
	this := CostStats{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CostStats) GetTotal() float64 {
	if o == nil || o.Total == nil {
		var ret float64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetTotalOk() (*float64, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CostStats) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float64 and assigns it to the Total field.
func (o *CostStats) SetTotal(v float64) {
	o.Total = &v
}

// GetCumulative returns the Cumulative field value if set, zero value otherwise.
func (o *CostStats) GetCumulative() []float64 {
	if o == nil || o.Cumulative == nil {
		var ret []float64
		return ret
	}
	return *o.Cumulative
}

// GetCumulativeOk returns a tuple with the Cumulative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetCumulativeOk() (*[]float64, bool) {
	if o == nil || o.Cumulative == nil {
		return nil, false
	}
	return o.Cumulative, true
}

// HasCumulative returns a boolean if a field has been set.
func (o *CostStats) HasCumulative() bool {
	if o != nil && o.Cumulative != nil {
		return true
	}

	return false
}

// SetCumulative gets a reference to the given []float64 and assigns it to the Cumulative field.
func (o *CostStats) SetCumulative(v []float64) {
	o.Cumulative = &v
}

// GetBudget returns the Budget field value if set, zero value otherwise.
func (o *CostStats) GetBudget() []float64 {
	if o == nil || o.Budget == nil {
		var ret []float64
		return ret
	}
	return *o.Budget
}

// GetBudgetOk returns a tuple with the Budget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetBudgetOk() (*[]float64, bool) {
	if o == nil || o.Budget == nil {
		return nil, false
	}
	return o.Budget, true
}

// HasBudget returns a boolean if a field has been set.
func (o *CostStats) HasBudget() bool {
	if o != nil && o.Budget != nil {
		return true
	}

	return false
}

// SetBudget gets a reference to the given []float64 and assigns it to the Budget field.
func (o *CostStats) SetBudget(v []float64) {
	o.Budget = &v
}

// GetBudgetLowerProjection returns the BudgetLowerProjection field value if set, zero value otherwise.
func (o *CostStats) GetBudgetLowerProjection() []float64 {
	if o == nil || o.BudgetLowerProjection == nil {
		var ret []float64
		return ret
	}
	return *o.BudgetLowerProjection
}

// GetBudgetLowerProjectionOk returns a tuple with the BudgetLowerProjection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetBudgetLowerProjectionOk() (*[]float64, bool) {
	if o == nil || o.BudgetLowerProjection == nil {
		return nil, false
	}
	return o.BudgetLowerProjection, true
}

// HasBudgetLowerProjection returns a boolean if a field has been set.
func (o *CostStats) HasBudgetLowerProjection() bool {
	if o != nil && o.BudgetLowerProjection != nil {
		return true
	}

	return false
}

// SetBudgetLowerProjection gets a reference to the given []float64 and assigns it to the BudgetLowerProjection field.
func (o *CostStats) SetBudgetLowerProjection(v []float64) {
	o.BudgetLowerProjection = &v
}

// GetBudgetUpperProjection returns the BudgetUpperProjection field value if set, zero value otherwise.
func (o *CostStats) GetBudgetUpperProjection() []float64 {
	if o == nil || o.BudgetUpperProjection == nil {
		var ret []float64
		return ret
	}
	return *o.BudgetUpperProjection
}

// GetBudgetUpperProjectionOk returns a tuple with the BudgetUpperProjection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetBudgetUpperProjectionOk() (*[]float64, bool) {
	if o == nil || o.BudgetUpperProjection == nil {
		return nil, false
	}
	return o.BudgetUpperProjection, true
}

// HasBudgetUpperProjection returns a boolean if a field has been set.
func (o *CostStats) HasBudgetUpperProjection() bool {
	if o != nil && o.BudgetUpperProjection != nil {
		return true
	}

	return false
}

// SetBudgetUpperProjection gets a reference to the given []float64 and assigns it to the BudgetUpperProjection field.
func (o *CostStats) SetBudgetUpperProjection(v []float64) {
	o.BudgetUpperProjection = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *CostStats) GetPeriod() []time.Time {
	if o == nil || o.Period == nil {
		var ret []time.Time
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetPeriodOk() (*[]time.Time, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *CostStats) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given []time.Time and assigns it to the Period field.
func (o *CostStats) SetPeriod(v []time.Time) {
	o.Period = &v
}

// GetProjectionPeriod returns the ProjectionPeriod field value if set, zero value otherwise.
func (o *CostStats) GetProjectionPeriod() []time.Time {
	if o == nil || o.ProjectionPeriod == nil {
		var ret []time.Time
		return ret
	}
	return *o.ProjectionPeriod
}

// GetProjectionPeriodOk returns a tuple with the ProjectionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetProjectionPeriodOk() (*[]time.Time, bool) {
	if o == nil || o.ProjectionPeriod == nil {
		return nil, false
	}
	return o.ProjectionPeriod, true
}

// HasProjectionPeriod returns a boolean if a field has been set.
func (o *CostStats) HasProjectionPeriod() bool {
	if o != nil && o.ProjectionPeriod != nil {
		return true
	}

	return false
}

// SetProjectionPeriod gets a reference to the given []time.Time and assigns it to the ProjectionPeriod field.
func (o *CostStats) SetProjectionPeriod(v []time.Time) {
	o.ProjectionPeriod = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CostStats) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CostStats) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CostStats) SetType(v string) {
	o.Type = &v
}

// GetByType returns the ByType field value if set, zero value otherwise.
func (o *CostStats) GetByType() map[string]float64 {
	if o == nil || o.ByType == nil {
		var ret map[string]float64
		return ret
	}
	return *o.ByType
}

// GetByTypeOk returns a tuple with the ByType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostStats) GetByTypeOk() (*map[string]float64, bool) {
	if o == nil || o.ByType == nil {
		return nil, false
	}
	return o.ByType, true
}

// HasByType returns a boolean if a field has been set.
func (o *CostStats) HasByType() bool {
	if o != nil && o.ByType != nil {
		return true
	}

	return false
}

// SetByType gets a reference to the given map[string]float64 and assigns it to the ByType field.
func (o *CostStats) SetByType(v map[string]float64) {
	o.ByType = &v
}

func (o CostStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Cumulative != nil {
		toSerialize["cumulative"] = o.Cumulative
	}
	if o.Budget != nil {
		toSerialize["budget"] = o.Budget
	}
	if o.BudgetLowerProjection != nil {
		toSerialize["budget_lower_projection"] = o.BudgetLowerProjection
	}
	if o.BudgetUpperProjection != nil {
		toSerialize["budget_upper_projection"] = o.BudgetUpperProjection
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.ProjectionPeriod != nil {
		toSerialize["projection_period"] = o.ProjectionPeriod
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ByType != nil {
		toSerialize["by_type"] = o.ByType
	}
	return json.Marshal(toSerialize)
}

type NullableCostStats struct {
	value *CostStats
	isSet bool
}

func (v NullableCostStats) Get() *CostStats {
	return v.value
}

func (v *NullableCostStats) Set(val *CostStats) {
	v.value = val
	v.isSet = true
}

func (v NullableCostStats) IsSet() bool {
	return v.isSet
}

func (v *NullableCostStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostStats(val *CostStats) *NullableCostStats {
	return &NullableCostStats{value: val, isSet: true}
}

func (v NullableCostStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


