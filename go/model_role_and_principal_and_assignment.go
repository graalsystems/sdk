/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// RoleAndPrincipalAndAssignment struct for RoleAndPrincipalAndAssignment
type RoleAndPrincipalAndAssignment struct {
	Role *Role `json:"role,omitempty"`
	Assignment *RoleAssignment `json:"assignment,omitempty"`
	Principal *Principal `json:"principal,omitempty"`
}

// NewRoleAndPrincipalAndAssignment instantiates a new RoleAndPrincipalAndAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleAndPrincipalAndAssignment() *RoleAndPrincipalAndAssignment {
	this := RoleAndPrincipalAndAssignment{}
	return &this
}

// NewRoleAndPrincipalAndAssignmentWithDefaults instantiates a new RoleAndPrincipalAndAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleAndPrincipalAndAssignmentWithDefaults() *RoleAndPrincipalAndAssignment {
	this := RoleAndPrincipalAndAssignment{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RoleAndPrincipalAndAssignment) GetRole() Role {
	if o == nil || o.Role == nil {
		var ret Role
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAndPrincipalAndAssignment) GetRoleOk() (*Role, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RoleAndPrincipalAndAssignment) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given Role and assigns it to the Role field.
func (o *RoleAndPrincipalAndAssignment) SetRole(v Role) {
	o.Role = &v
}

// GetAssignment returns the Assignment field value if set, zero value otherwise.
func (o *RoleAndPrincipalAndAssignment) GetAssignment() RoleAssignment {
	if o == nil || o.Assignment == nil {
		var ret RoleAssignment
		return ret
	}
	return *o.Assignment
}

// GetAssignmentOk returns a tuple with the Assignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAndPrincipalAndAssignment) GetAssignmentOk() (*RoleAssignment, bool) {
	if o == nil || o.Assignment == nil {
		return nil, false
	}
	return o.Assignment, true
}

// HasAssignment returns a boolean if a field has been set.
func (o *RoleAndPrincipalAndAssignment) HasAssignment() bool {
	if o != nil && o.Assignment != nil {
		return true
	}

	return false
}

// SetAssignment gets a reference to the given RoleAssignment and assigns it to the Assignment field.
func (o *RoleAndPrincipalAndAssignment) SetAssignment(v RoleAssignment) {
	o.Assignment = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *RoleAndPrincipalAndAssignment) GetPrincipal() Principal {
	if o == nil || o.Principal == nil {
		var ret Principal
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAndPrincipalAndAssignment) GetPrincipalOk() (*Principal, bool) {
	if o == nil || o.Principal == nil {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *RoleAndPrincipalAndAssignment) HasPrincipal() bool {
	if o != nil && o.Principal != nil {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given Principal and assigns it to the Principal field.
func (o *RoleAndPrincipalAndAssignment) SetPrincipal(v Principal) {
	o.Principal = &v
}

func (o RoleAndPrincipalAndAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Assignment != nil {
		toSerialize["assignment"] = o.Assignment
	}
	if o.Principal != nil {
		toSerialize["principal"] = o.Principal
	}
	return json.Marshal(toSerialize)
}

type NullableRoleAndPrincipalAndAssignment struct {
	value *RoleAndPrincipalAndAssignment
	isSet bool
}

func (v NullableRoleAndPrincipalAndAssignment) Get() *RoleAndPrincipalAndAssignment {
	return v.value
}

func (v *NullableRoleAndPrincipalAndAssignment) Set(val *RoleAndPrincipalAndAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAndPrincipalAndAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAndPrincipalAndAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAndPrincipalAndAssignment(val *RoleAndPrincipalAndAssignment) *NullableRoleAndPrincipalAndAssignment {
	return &NullableRoleAndPrincipalAndAssignment{value: val, isSet: true}
}

func (v NullableRoleAndPrincipalAndAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAndPrincipalAndAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


