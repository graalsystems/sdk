/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"time"
)

// checks if the LogEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogEntry{}

// LogEntry struct for LogEntry
type LogEntry struct {
	At *time.Time `json:"at,omitempty"`
	Message *string `json:"message,omitempty"`
	Source *string `json:"source,omitempty"`
}

// NewLogEntry instantiates a new LogEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogEntry() *LogEntry {
	this := LogEntry{}
	return &this
}

// NewLogEntryWithDefaults instantiates a new LogEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogEntryWithDefaults() *LogEntry {
	this := LogEntry{}
	return &this
}

// GetAt returns the At field value if set, zero value otherwise.
func (o *LogEntry) GetAt() time.Time {
	if o == nil || IsNil(o.At) {
		var ret time.Time
		return ret
	}
	return *o.At
}

// GetAtOk returns a tuple with the At field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEntry) GetAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.At) {
		return nil, false
	}
	return o.At, true
}

// HasAt returns a boolean if a field has been set.
func (o *LogEntry) HasAt() bool {
	if o != nil && !IsNil(o.At) {
		return true
	}

	return false
}

// SetAt gets a reference to the given time.Time and assigns it to the At field.
func (o *LogEntry) SetAt(v time.Time) {
	o.At = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *LogEntry) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEntry) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *LogEntry) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *LogEntry) SetMessage(v string) {
	o.Message = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *LogEntry) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogEntry) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *LogEntry) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *LogEntry) SetSource(v string) {
	o.Source = &v
}

func (o LogEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.At) {
		toSerialize["at"] = o.At
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableLogEntry struct {
	value *LogEntry
	isSet bool
}

func (v NullableLogEntry) Get() *LogEntry {
	return v.value
}

func (v *NullableLogEntry) Set(val *LogEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableLogEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableLogEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogEntry(val *LogEntry) *NullableLogEntry {
	return &NullableLogEntry{value: val, isSet: true}
}

func (v NullableLogEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


