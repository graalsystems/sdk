/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ParquetWriter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParquetWriter{}

// ParquetWriter struct for ParquetWriter
type ParquetWriter struct {
	// How to partition the dataset.
	PartitionBy []string `json:"partition_by,omitempty"`
	Mode *SaveMode `json:"mode,omitempty"`
	// Type of on-the-fly compression to use.
	Compression *string `json:"compression,omitempty"`
	// Define file type for PARQUET.
	Type *string `json:"type,omitempty"`
	// Path to PARQUET file.
	Path string `json:"path"`
}

type _ParquetWriter ParquetWriter

// NewParquetWriter instantiates a new ParquetWriter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParquetWriter(path string) *ParquetWriter {
	this := ParquetWriter{}
	var type_ string = "parquet"
	this.Type = &type_
	this.Path = path
	return &this
}

// NewParquetWriterWithDefaults instantiates a new ParquetWriter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParquetWriterWithDefaults() *ParquetWriter {
	this := ParquetWriter{}
	var type_ string = "parquet"
	this.Type = &type_
	return &this
}

// GetPartitionBy returns the PartitionBy field value if set, zero value otherwise.
func (o *ParquetWriter) GetPartitionBy() []string {
	if o == nil || IsNil(o.PartitionBy) {
		var ret []string
		return ret
	}
	return o.PartitionBy
}

// GetPartitionByOk returns a tuple with the PartitionBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParquetWriter) GetPartitionByOk() ([]string, bool) {
	if o == nil || IsNil(o.PartitionBy) {
		return nil, false
	}
	return o.PartitionBy, true
}

// HasPartitionBy returns a boolean if a field has been set.
func (o *ParquetWriter) HasPartitionBy() bool {
	if o != nil && !IsNil(o.PartitionBy) {
		return true
	}

	return false
}

// SetPartitionBy gets a reference to the given []string and assigns it to the PartitionBy field.
func (o *ParquetWriter) SetPartitionBy(v []string) {
	o.PartitionBy = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *ParquetWriter) GetMode() SaveMode {
	if o == nil || IsNil(o.Mode) {
		var ret SaveMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParquetWriter) GetModeOk() (*SaveMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *ParquetWriter) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given SaveMode and assigns it to the Mode field.
func (o *ParquetWriter) SetMode(v SaveMode) {
	o.Mode = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *ParquetWriter) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParquetWriter) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *ParquetWriter) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *ParquetWriter) SetCompression(v string) {
	o.Compression = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ParquetWriter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParquetWriter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ParquetWriter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ParquetWriter) SetType(v string) {
	o.Type = &v
}

// GetPath returns the Path field value
func (o *ParquetWriter) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ParquetWriter) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ParquetWriter) SetPath(v string) {
	o.Path = v
}

func (o ParquetWriter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParquetWriter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PartitionBy) {
		toSerialize["partition_by"] = o.PartitionBy
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *ParquetWriter) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParquetWriter := _ParquetWriter{}

	err = json.Unmarshal(bytes, &varParquetWriter)

	if err != nil {
		return err
	}

	*o = ParquetWriter(varParquetWriter)

	return err
}

type NullableParquetWriter struct {
	value *ParquetWriter
	isSet bool
}

func (v NullableParquetWriter) Get() *ParquetWriter {
	return v.value
}

func (v *NullableParquetWriter) Set(val *ParquetWriter) {
	v.value = val
	v.isSet = true
}

func (v NullableParquetWriter) IsSet() bool {
	return v.isSet
}

func (v *NullableParquetWriter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParquetWriter(val *ParquetWriter) *NullableParquetWriter {
	return &NullableParquetWriter{value: val, isSet: true}
}

func (v NullableParquetWriter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParquetWriter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


