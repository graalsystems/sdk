/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FieldAPIService FieldAPI service
type FieldAPIService service

type ApiCreateFieldRequest struct {
	ctx context.Context
	ApiService *FieldAPIService
	xTenant *string
	layerName string
	databaseName string
	tableName string
	field *Field
}

func (r ApiCreateFieldRequest) XTenant(xTenant string) ApiCreateFieldRequest {
	r.xTenant = &xTenant
	return r
}

// The field to be created
func (r ApiCreateFieldRequest) Field(field Field) ApiCreateFieldRequest {
	r.field = &field
	return r
}

func (r ApiCreateFieldRequest) Execute() (*Field, *http.Response, error) {
	return r.ApiService.CreateFieldExecute(r)
}

/*
CreateField Create a field

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param layerName Name of the layer
 @param databaseName Name of the database
 @param tableName Name of the table
 @return ApiCreateFieldRequest
*/
func (a *FieldAPIService) CreateField(ctx context.Context, layerName string, databaseName string, tableName string) ApiCreateFieldRequest {
	return ApiCreateFieldRequest{
		ApiService: a,
		ctx: ctx,
		layerName: layerName,
		databaseName: databaseName,
		tableName: tableName,
	}
}

// Execute executes the request
//  @return Field
func (a *FieldAPIService) CreateFieldExecute(r ApiCreateFieldRequest) (*Field, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Field
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FieldAPIService.CreateField")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/layers/{layer_name}/databases/{database_name}/tables/{table_name}/fields"
	localVarPath = strings.Replace(localVarPath, "{"+"layer_name"+"}", url.PathEscape(parameterValueToString(r.layerName, "layerName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_name"+"}", url.PathEscape(parameterValueToString(r.databaseName, "databaseName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"table_name"+"}", url.PathEscape(parameterValueToString(r.tableName, "tableName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.field == nil {
		return localVarReturnValue, nil, reportError("field is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.graal.systems.v1.field+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.field+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	// body params
	localVarPostBody = r.field
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindFieldsRequest struct {
	ctx context.Context
	ApiService *FieldAPIService
	xTenant *string
	layerName string
	databaseName string
	tableName string
}

func (r ApiFindFieldsRequest) XTenant(xTenant string) ApiFindFieldsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindFieldsRequest) Execute() ([]Field, *http.Response, error) {
	return r.ApiService.FindFieldsExecute(r)
}

/*
FindFields Retrieve all fields

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param layerName Name of the layer
 @param databaseName Name of the database
 @param tableName Name of the table
 @return ApiFindFieldsRequest
*/
func (a *FieldAPIService) FindFields(ctx context.Context, layerName string, databaseName string, tableName string) ApiFindFieldsRequest {
	return ApiFindFieldsRequest{
		ApiService: a,
		ctx: ctx,
		layerName: layerName,
		databaseName: databaseName,
		tableName: tableName,
	}
}

// Execute executes the request
//  @return []Field
func (a *FieldAPIService) FindFieldsExecute(r ApiFindFieldsRequest) ([]Field, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Field
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FieldAPIService.FindFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/layers/{layer_name}/databases/{database_name}/tables/{table_name}/fields"
	localVarPath = strings.Replace(localVarPath, "{"+"layer_name"+"}", url.PathEscape(parameterValueToString(r.layerName, "layerName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"database_name"+"}", url.PathEscape(parameterValueToString(r.databaseName, "databaseName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"table_name"+"}", url.PathEscape(parameterValueToString(r.tableName, "tableName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.graal.systems.v1.field+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
