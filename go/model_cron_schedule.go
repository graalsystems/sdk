/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems/sdk

import (
	"encoding/json"
)

// CronSchedule struct for CronSchedule
type CronSchedule struct {
	Schedule
	Type *string `json:"type,omitempty"`
	CronExpression *string `json:"cron_expression,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	InfrastructureId *string `json:"infrastructure_id,omitempty"`
}

// NewCronSchedule instantiates a new CronSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCronSchedule() *CronSchedule {
	this := CronSchedule{}
	var type_ string = "cron"
	this.Type = &type_
	return &this
}

// NewCronScheduleWithDefaults instantiates a new CronSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronScheduleWithDefaults() *CronSchedule {
	this := CronSchedule{}
	var type_ string = "cron"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CronSchedule) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSchedule) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CronSchedule) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CronSchedule) SetType(v string) {
	o.Type = &v
}

// GetCronExpression returns the CronExpression field value if set, zero value otherwise.
func (o *CronSchedule) GetCronExpression() string {
	if o == nil || o.CronExpression == nil {
		var ret string
		return ret
	}
	return *o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSchedule) GetCronExpressionOk() (*string, bool) {
	if o == nil || o.CronExpression == nil {
		return nil, false
	}
	return o.CronExpression, true
}

// HasCronExpression returns a boolean if a field has been set.
func (o *CronSchedule) HasCronExpression() bool {
	if o != nil && o.CronExpression != nil {
		return true
	}

	return false
}

// SetCronExpression gets a reference to the given string and assigns it to the CronExpression field.
func (o *CronSchedule) SetCronExpression(v string) {
	o.CronExpression = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *CronSchedule) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSchedule) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *CronSchedule) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *CronSchedule) SetTimezone(v string) {
	o.Timezone = &v
}

// GetInfrastructureId returns the InfrastructureId field value if set, zero value otherwise.
func (o *CronSchedule) GetInfrastructureId() string {
	if o == nil || o.InfrastructureId == nil {
		var ret string
		return ret
	}
	return *o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CronSchedule) GetInfrastructureIdOk() (*string, bool) {
	if o == nil || o.InfrastructureId == nil {
		return nil, false
	}
	return o.InfrastructureId, true
}

// HasInfrastructureId returns a boolean if a field has been set.
func (o *CronSchedule) HasInfrastructureId() bool {
	if o != nil && o.InfrastructureId != nil {
		return true
	}

	return false
}

// SetInfrastructureId gets a reference to the given string and assigns it to the InfrastructureId field.
func (o *CronSchedule) SetInfrastructureId(v string) {
	o.InfrastructureId = &v
}

func (o CronSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedSchedule, errSchedule := json.Marshal(o.Schedule)
	if errSchedule != nil {
		return []byte{}, errSchedule
	}
	errSchedule = json.Unmarshal([]byte(serializedSchedule), &toSerialize)
	if errSchedule != nil {
		return []byte{}, errSchedule
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.CronExpression != nil {
		toSerialize["cron_expression"] = o.CronExpression
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.InfrastructureId != nil {
		toSerialize["infrastructure_id"] = o.InfrastructureId
	}
	return json.Marshal(toSerialize)
}

type NullableCronSchedule struct {
	value *CronSchedule
	isSet bool
}

func (v NullableCronSchedule) Get() *CronSchedule {
	return v.value
}

func (v *NullableCronSchedule) Set(val *CronSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableCronSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableCronSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronSchedule(val *CronSchedule) *NullableCronSchedule {
	return &NullableCronSchedule{value: val, isSet: true}
}

func (v NullableCronSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


