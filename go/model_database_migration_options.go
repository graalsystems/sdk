/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
)

// checks if the DatabaseMigrationOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseMigrationOptions{}

// DatabaseMigrationOptions struct for DatabaseMigrationOptions
type DatabaseMigrationOptions struct {
	Options
	Type *string `json:"type,omitempty"`
	DatawarehouseId *string `json:"datawarehouse_id,omitempty"`
	Repository *GitLibrary `json:"repository,omitempty"`
}

// NewDatabaseMigrationOptions instantiates a new DatabaseMigrationOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseMigrationOptions() *DatabaseMigrationOptions {
	this := DatabaseMigrationOptions{}
	var type_ string = "database-migration"
	this.Type = &type_
	return &this
}

// NewDatabaseMigrationOptionsWithDefaults instantiates a new DatabaseMigrationOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseMigrationOptionsWithDefaults() *DatabaseMigrationOptions {
	this := DatabaseMigrationOptions{}
	var type_ string = "database-migration"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatabaseMigrationOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseMigrationOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatabaseMigrationOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DatabaseMigrationOptions) SetType(v string) {
	o.Type = &v
}

// GetDatawarehouseId returns the DatawarehouseId field value if set, zero value otherwise.
func (o *DatabaseMigrationOptions) GetDatawarehouseId() string {
	if o == nil || IsNil(o.DatawarehouseId) {
		var ret string
		return ret
	}
	return *o.DatawarehouseId
}

// GetDatawarehouseIdOk returns a tuple with the DatawarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseMigrationOptions) GetDatawarehouseIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatawarehouseId) {
		return nil, false
	}
	return o.DatawarehouseId, true
}

// HasDatawarehouseId returns a boolean if a field has been set.
func (o *DatabaseMigrationOptions) HasDatawarehouseId() bool {
	if o != nil && !IsNil(o.DatawarehouseId) {
		return true
	}

	return false
}

// SetDatawarehouseId gets a reference to the given string and assigns it to the DatawarehouseId field.
func (o *DatabaseMigrationOptions) SetDatawarehouseId(v string) {
	o.DatawarehouseId = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *DatabaseMigrationOptions) GetRepository() GitLibrary {
	if o == nil || IsNil(o.Repository) {
		var ret GitLibrary
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseMigrationOptions) GetRepositoryOk() (*GitLibrary, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *DatabaseMigrationOptions) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given GitLibrary and assigns it to the Repository field.
func (o *DatabaseMigrationOptions) SetRepository(v GitLibrary) {
	o.Repository = &v
}

func (o DatabaseMigrationOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseMigrationOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedOptions, errOptions := json.Marshal(o.Options)
	if errOptions != nil {
		return map[string]interface{}{}, errOptions
	}
	errOptions = json.Unmarshal([]byte(serializedOptions), &toSerialize)
	if errOptions != nil {
		return map[string]interface{}{}, errOptions
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DatawarehouseId) {
		toSerialize["datawarehouse_id"] = o.DatawarehouseId
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableDatabaseMigrationOptions struct {
	value *DatabaseMigrationOptions
	isSet bool
}

func (v NullableDatabaseMigrationOptions) Get() *DatabaseMigrationOptions {
	return v.value
}

func (v *NullableDatabaseMigrationOptions) Set(val *DatabaseMigrationOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseMigrationOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseMigrationOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseMigrationOptions(val *DatabaseMigrationOptions) *NullableDatabaseMigrationOptions {
	return &NullableDatabaseMigrationOptions{value: val, isSet: true}
}

func (v NullableDatabaseMigrationOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseMigrationOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


