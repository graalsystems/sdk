/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// checks if the JoinParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JoinParams{}

// JoinParams struct for JoinParams
type JoinParams struct {
	// List of dictionaries where the 'left' key represents the         name of the column in the left DataFrame and the 'right' key represents         the name of the column to join with the right DataFrame.
	Columns []map[string]string `json:"columns"`
	// Join two tables (left, right, inner, outer)
	JoinType string `json:"join_type"`
}

type _JoinParams JoinParams

// NewJoinParams instantiates a new JoinParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoinParams(columns []map[string]string, joinType string) *JoinParams {
	this := JoinParams{}
	this.Columns = columns
	this.JoinType = joinType
	return &this
}

// NewJoinParamsWithDefaults instantiates a new JoinParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoinParamsWithDefaults() *JoinParams {
	this := JoinParams{}
	return &this
}

// GetColumns returns the Columns field value
func (o *JoinParams) GetColumns() []map[string]string {
	if o == nil {
		var ret []map[string]string
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *JoinParams) GetColumnsOk() ([]map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *JoinParams) SetColumns(v []map[string]string) {
	o.Columns = v
}

// GetJoinType returns the JoinType field value
func (o *JoinParams) GetJoinType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JoinType
}

// GetJoinTypeOk returns a tuple with the JoinType field value
// and a boolean to check if the value has been set.
func (o *JoinParams) GetJoinTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JoinType, true
}

// SetJoinType sets field value
func (o *JoinParams) SetJoinType(v string) {
	o.JoinType = v
}

func (o JoinParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JoinParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["columns"] = o.Columns
	toSerialize["join_type"] = o.JoinType
	return toSerialize, nil
}

func (o *JoinParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"columns",
		"join_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJoinParams := _JoinParams{}

	err = json.Unmarshal(bytes, &varJoinParams)

	if err != nil {
		return err
	}

	*o = JoinParams(varJoinParams)

	return err
}

type NullableJoinParams struct {
	value *JoinParams
	isSet bool
}

func (v NullableJoinParams) Get() *JoinParams {
	return v.value
}

func (v *NullableJoinParams) Set(val *JoinParams) {
	v.value = val
	v.isSet = true
}

func (v NullableJoinParams) IsSet() bool {
	return v.isSet
}

func (v *NullableJoinParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoinParams(val *JoinParams) *NullableJoinParams {
	return &NullableJoinParams{value: val, isSet: true}
}

func (v NullableJoinParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoinParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


