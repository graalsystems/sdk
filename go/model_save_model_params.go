/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SaveModelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaveModelParams{}

// SaveModelParams struct for SaveModelParams
type SaveModelParams struct {
	// Type of object model.
	Type *string `json:"type,omitempty"`
	Connector Connector `json:"connector"`
	Object ParametersToWriteAFile2 `json:"object"`
}

type _SaveModelParams SaveModelParams

// NewSaveModelParams instantiates a new SaveModelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaveModelParams(connector Connector, object ParametersToWriteAFile2) *SaveModelParams {
	this := SaveModelParams{}
	var type_ string = "model"
	this.Type = &type_
	this.Connector = connector
	this.Object = object
	return &this
}

// NewSaveModelParamsWithDefaults instantiates a new SaveModelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaveModelParamsWithDefaults() *SaveModelParams {
	this := SaveModelParams{}
	var type_ string = "model"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SaveModelParams) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveModelParams) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SaveModelParams) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SaveModelParams) SetType(v string) {
	o.Type = &v
}

// GetConnector returns the Connector field value
func (o *SaveModelParams) GetConnector() Connector {
	if o == nil {
		var ret Connector
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *SaveModelParams) GetConnectorOk() (*Connector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *SaveModelParams) SetConnector(v Connector) {
	o.Connector = v
}

// GetObject returns the Object field value
func (o *SaveModelParams) GetObject() ParametersToWriteAFile2 {
	if o == nil {
		var ret ParametersToWriteAFile2
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *SaveModelParams) GetObjectOk() (*ParametersToWriteAFile2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *SaveModelParams) SetObject(v ParametersToWriteAFile2) {
	o.Object = v
}

func (o SaveModelParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaveModelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["connector"] = o.Connector
	toSerialize["object"] = o.Object
	return toSerialize, nil
}

func (o *SaveModelParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connector",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaveModelParams := _SaveModelParams{}

	err = json.Unmarshal(bytes, &varSaveModelParams)

	if err != nil {
		return err
	}

	*o = SaveModelParams(varSaveModelParams)

	return err
}

type NullableSaveModelParams struct {
	value *SaveModelParams
	isSet bool
}

func (v NullableSaveModelParams) Get() *SaveModelParams {
	return v.value
}

func (v *NullableSaveModelParams) Set(val *SaveModelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSaveModelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSaveModelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaveModelParams(val *SaveModelParams) *NullableSaveModelParams {
	return &NullableSaveModelParams{value: val, isSet: true}
}

func (v NullableSaveModelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaveModelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


