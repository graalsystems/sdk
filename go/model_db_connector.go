/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
)

// checks if the DBConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DBConnector{}

// DBConnector Connector for databases.  Attributes ---------- type : ConnectorType     Database type of connector. options : DBConnectorOptions     Options to connect to a database.
type DBConnector struct {
	// Connector type for a database connector like SQL
	Type *string `json:"type,omitempty"`
	// Options to connect to a database.
	Options map[string]interface{} `json:"options,omitempty"`
}

// NewDBConnector instantiates a new DBConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBConnector() *DBConnector {
	this := DBConnector{}
	var type_ string = "DB"
	this.Type = &type_
	return &this
}

// NewDBConnectorWithDefaults instantiates a new DBConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBConnectorWithDefaults() *DBConnector {
	this := DBConnector{}
	var type_ string = "DB"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DBConnector) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DBConnector) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DBConnector) SetType(v string) {
	o.Type = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DBConnector) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBConnector) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DBConnector) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *DBConnector) SetOptions(v map[string]interface{}) {
	o.Options = v
}

func (o DBConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DBConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableDBConnector struct {
	value *DBConnector
	isSet bool
}

func (v NullableDBConnector) Get() *DBConnector {
	return v.value
}

func (v *NullableDBConnector) Set(val *DBConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableDBConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableDBConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBConnector(val *DBConnector) *NullableDBConnector {
	return &NullableDBConnector{value: val, isSet: true}
}

func (v NullableDBConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


