/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// KnimeOptionsAllOf struct for KnimeOptionsAllOf
type KnimeOptionsAllOf struct {
	Type *string `json:"type,omitempty"`
	Workflow *string `json:"workflow,omitempty"`
	Archive *Library `json:"archive,omitempty"`
	Preferences *[]string `json:"preferences,omitempty"`
}

// NewKnimeOptionsAllOf instantiates a new KnimeOptionsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKnimeOptionsAllOf() *KnimeOptionsAllOf {
	this := KnimeOptionsAllOf{}
	var type_ string = "knime"
	this.Type = &type_
	return &this
}

// NewKnimeOptionsAllOfWithDefaults instantiates a new KnimeOptionsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKnimeOptionsAllOfWithDefaults() *KnimeOptionsAllOf {
	this := KnimeOptionsAllOf{}
	var type_ string = "knime"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KnimeOptionsAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnimeOptionsAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KnimeOptionsAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KnimeOptionsAllOf) SetType(v string) {
	o.Type = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *KnimeOptionsAllOf) GetWorkflow() string {
	if o == nil || o.Workflow == nil {
		var ret string
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnimeOptionsAllOf) GetWorkflowOk() (*string, bool) {
	if o == nil || o.Workflow == nil {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *KnimeOptionsAllOf) HasWorkflow() bool {
	if o != nil && o.Workflow != nil {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given string and assigns it to the Workflow field.
func (o *KnimeOptionsAllOf) SetWorkflow(v string) {
	o.Workflow = &v
}

// GetArchive returns the Archive field value if set, zero value otherwise.
func (o *KnimeOptionsAllOf) GetArchive() Library {
	if o == nil || o.Archive == nil {
		var ret Library
		return ret
	}
	return *o.Archive
}

// GetArchiveOk returns a tuple with the Archive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnimeOptionsAllOf) GetArchiveOk() (*Library, bool) {
	if o == nil || o.Archive == nil {
		return nil, false
	}
	return o.Archive, true
}

// HasArchive returns a boolean if a field has been set.
func (o *KnimeOptionsAllOf) HasArchive() bool {
	if o != nil && o.Archive != nil {
		return true
	}

	return false
}

// SetArchive gets a reference to the given Library and assigns it to the Archive field.
func (o *KnimeOptionsAllOf) SetArchive(v Library) {
	o.Archive = &v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *KnimeOptionsAllOf) GetPreferences() []string {
	if o == nil || o.Preferences == nil {
		var ret []string
		return ret
	}
	return *o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KnimeOptionsAllOf) GetPreferencesOk() (*[]string, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *KnimeOptionsAllOf) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given []string and assigns it to the Preferences field.
func (o *KnimeOptionsAllOf) SetPreferences(v []string) {
	o.Preferences = &v
}

func (o KnimeOptionsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Workflow != nil {
		toSerialize["workflow"] = o.Workflow
	}
	if o.Archive != nil {
		toSerialize["archive"] = o.Archive
	}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	return json.Marshal(toSerialize)
}

type NullableKnimeOptionsAllOf struct {
	value *KnimeOptionsAllOf
	isSet bool
}

func (v NullableKnimeOptionsAllOf) Get() *KnimeOptionsAllOf {
	return v.value
}

func (v *NullableKnimeOptionsAllOf) Set(val *KnimeOptionsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableKnimeOptionsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableKnimeOptionsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnimeOptionsAllOf(val *KnimeOptionsAllOf) *NullableKnimeOptionsAllOf {
	return &NullableKnimeOptionsAllOf{value: val, isSet: true}
}

func (v NullableKnimeOptionsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnimeOptionsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


