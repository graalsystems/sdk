/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// ParametersToWriteAFile2 Options for reading a file (header, file path, separator,         delimiter, ...).
type ParametersToWriteAFile2 struct {
	JoblibWriter *JoblibWriter
	PickleWriter *PickleWriter
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ParametersToWriteAFile2) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into JoblibWriter
	err = json.Unmarshal(data, &dst.JoblibWriter);
	if err == nil {
		jsonJoblibWriter, _ := json.Marshal(dst.JoblibWriter)
		if string(jsonJoblibWriter) == "{}" { // empty struct
			dst.JoblibWriter = nil
		} else {
			return nil // data stored in dst.JoblibWriter, return on the first match
		}
	} else {
		dst.JoblibWriter = nil
	}

	// try to unmarshal JSON data into PickleWriter
	err = json.Unmarshal(data, &dst.PickleWriter);
	if err == nil {
		jsonPickleWriter, _ := json.Marshal(dst.PickleWriter)
		if string(jsonPickleWriter) == "{}" { // empty struct
			dst.PickleWriter = nil
		} else {
			return nil // data stored in dst.PickleWriter, return on the first match
		}
	} else {
		dst.PickleWriter = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ParametersToWriteAFile2)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ParametersToWriteAFile2) MarshalJSON() ([]byte, error) {
	if src.JoblibWriter != nil {
		return json.Marshal(&src.JoblibWriter)
	}

	if src.PickleWriter != nil {
		return json.Marshal(&src.PickleWriter)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableParametersToWriteAFile2 struct {
	value *ParametersToWriteAFile2
	isSet bool
}

func (v NullableParametersToWriteAFile2) Get() *ParametersToWriteAFile2 {
	return v.value
}

func (v *NullableParametersToWriteAFile2) Set(val *ParametersToWriteAFile2) {
	v.value = val
	v.isSet = true
}

func (v NullableParametersToWriteAFile2) IsSet() bool {
	return v.isSet
}

func (v *NullableParametersToWriteAFile2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParametersToWriteAFile2(val *ParametersToWriteAFile2) *NullableParametersToWriteAFile2 {
	return &NullableParametersToWriteAFile2{value: val, isSet: true}
}

func (v NullableParametersToWriteAFile2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParametersToWriteAFile2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


