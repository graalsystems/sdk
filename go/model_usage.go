/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"time"
)

// checks if the Usage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Usage{}

// Usage struct for Usage
type Usage struct {
	ProductType *string `json:"product_type,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
	ProductReference *string `json:"product_reference,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Dimensions *map[string]string `json:"dimensions,omitempty"`
}

// NewUsage instantiates a new Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsage() *Usage {
	this := Usage{}
	return &this
}

// NewUsageWithDefaults instantiates a new Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageWithDefaults() *Usage {
	this := Usage{}
	return &this
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *Usage) GetProductType() string {
	if o == nil || IsNil(o.ProductType) {
		var ret string
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetProductTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *Usage) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given string and assigns it to the ProductType field.
func (o *Usage) SetProductType(v string) {
	o.ProductType = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Usage) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Usage) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *Usage) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetProductReference returns the ProductReference field value if set, zero value otherwise.
func (o *Usage) GetProductReference() string {
	if o == nil || IsNil(o.ProductReference) {
		var ret string
		return ret
	}
	return *o.ProductReference
}

// GetProductReferenceOk returns a tuple with the ProductReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetProductReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.ProductReference) {
		return nil, false
	}
	return o.ProductReference, true
}

// HasProductReference returns a boolean if a field has been set.
func (o *Usage) HasProductReference() bool {
	if o != nil && !IsNil(o.ProductReference) {
		return true
	}

	return false
}

// SetProductReference gets a reference to the given string and assigns it to the ProductReference field.
func (o *Usage) SetProductReference(v string) {
	o.ProductReference = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Usage) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Usage) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Usage) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *Usage) GetDimensions() map[string]string {
	if o == nil || IsNil(o.Dimensions) {
		var ret map[string]string
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetDimensionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *Usage) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given map[string]string and assigns it to the Dimensions field.
func (o *Usage) SetDimensions(v map[string]string) {
	o.Dimensions = &v
}

func (o Usage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Usage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductType) {
		toSerialize["product_type"] = o.ProductType
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.ProductReference) {
		toSerialize["product_reference"] = o.ProductReference
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	return toSerialize, nil
}

type NullableUsage struct {
	value *Usage
	isSet bool
}

func (v NullableUsage) Get() *Usage {
	return v.value
}

func (v *NullableUsage) Set(val *Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsage(val *Usage) *NullableUsage {
	return &NullableUsage{value: val, isSet: true}
}

func (v NullableUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


