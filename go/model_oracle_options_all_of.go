/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// OracleOptionsAllOf struct for OracleOptionsAllOf
type OracleOptionsAllOf struct {
	Type *string `json:"type,omitempty"`
}

// NewOracleOptionsAllOf instantiates a new OracleOptionsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleOptionsAllOf() *OracleOptionsAllOf {
	this := OracleOptionsAllOf{}
	var type_ string = "oracle"
	this.Type = &type_
	return &this
}

// NewOracleOptionsAllOfWithDefaults instantiates a new OracleOptionsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleOptionsAllOfWithDefaults() *OracleOptionsAllOf {
	this := OracleOptionsAllOf{}
	var type_ string = "oracle"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OracleOptionsAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleOptionsAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OracleOptionsAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OracleOptionsAllOf) SetType(v string) {
	o.Type = &v
}

func (o OracleOptionsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableOracleOptionsAllOf struct {
	value *OracleOptionsAllOf
	isSet bool
}

func (v NullableOracleOptionsAllOf) Get() *OracleOptionsAllOf {
	return v.value
}

func (v *NullableOracleOptionsAllOf) Set(val *OracleOptionsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleOptionsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleOptionsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleOptionsAllOf(val *OracleOptionsAllOf) *NullableOracleOptionsAllOf {
	return &NullableOracleOptionsAllOf{value: val, isSet: true}
}

func (v NullableOracleOptionsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleOptionsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


