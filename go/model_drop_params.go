/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// checks if the DropParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DropParams{}

// DropParams struct for DropParams
type DropParams struct {
	// List of columns to drop.
	Columns []string `json:"columns"`
}

type _DropParams DropParams

// NewDropParams instantiates a new DropParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropParams(columns []string) *DropParams {
	this := DropParams{}
	this.Columns = columns
	return &this
}

// NewDropParamsWithDefaults instantiates a new DropParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropParamsWithDefaults() *DropParams {
	this := DropParams{}
	return &this
}

// GetColumns returns the Columns field value
func (o *DropParams) GetColumns() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *DropParams) GetColumnsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *DropParams) SetColumns(v []string) {
	o.Columns = v
}

func (o DropParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DropParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["columns"] = o.Columns
	return toSerialize, nil
}

func (o *DropParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"columns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDropParams := _DropParams{}

	err = json.Unmarshal(bytes, &varDropParams)

	if err != nil {
		return err
	}

	*o = DropParams(varDropParams)

	return err
}

type NullableDropParams struct {
	value *DropParams
	isSet bool
}

func (v NullableDropParams) Get() *DropParams {
	return v.value
}

func (v *NullableDropParams) Set(val *DropParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDropParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDropParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropParams(val *DropParams) *NullableDropParams {
	return &NullableDropParams{value: val, isSet: true}
}

func (v NullableDropParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


