/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
)

// checks if the InPersonDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InPersonDetails{}

// InPersonDetails struct for InPersonDetails
type InPersonDetails struct {
	Details1
	Type *string `json:"type,omitempty"`
}

// NewInPersonDetails instantiates a new InPersonDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInPersonDetails() *InPersonDetails {
	this := InPersonDetails{}
	var type_ string = "in_person"
	this.Type = &type_
	return &this
}

// NewInPersonDetailsWithDefaults instantiates a new InPersonDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInPersonDetailsWithDefaults() *InPersonDetails {
	this := InPersonDetails{}
	var type_ string = "in_person"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InPersonDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InPersonDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InPersonDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InPersonDetails) SetType(v string) {
	o.Type = &v
}

func (o InPersonDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InPersonDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDetails1, errDetails1 := json.Marshal(o.Details1)
	if errDetails1 != nil {
		return map[string]interface{}{}, errDetails1
	}
	errDetails1 = json.Unmarshal([]byte(serializedDetails1), &toSerialize)
	if errDetails1 != nil {
		return map[string]interface{}{}, errDetails1
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableInPersonDetails struct {
	value *InPersonDetails
	isSet bool
}

func (v NullableInPersonDetails) Get() *InPersonDetails {
	return v.value
}

func (v *NullableInPersonDetails) Set(val *InPersonDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInPersonDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInPersonDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInPersonDetails(val *InPersonDetails) *NullableInPersonDetails {
	return &NullableInPersonDetails{value: val, isSet: true}
}

func (v NullableInPersonDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInPersonDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


