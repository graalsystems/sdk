/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderParams{}

// OrderParams struct for OrderParams
type OrderParams struct {
	// List of dictionary. For each element the 'name'         corresponds to the columns to order and         the 'direction' the direction for sorting (asc or desc).
	Columns []map[string]string `json:"columns"`
}

type _OrderParams OrderParams

// NewOrderParams instantiates a new OrderParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderParams(columns []map[string]string) *OrderParams {
	this := OrderParams{}
	this.Columns = columns
	return &this
}

// NewOrderParamsWithDefaults instantiates a new OrderParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderParamsWithDefaults() *OrderParams {
	this := OrderParams{}
	return &this
}

// GetColumns returns the Columns field value
func (o *OrderParams) GetColumns() []map[string]string {
	if o == nil {
		var ret []map[string]string
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *OrderParams) GetColumnsOk() ([]map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *OrderParams) SetColumns(v []map[string]string) {
	o.Columns = v
}

func (o OrderParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["columns"] = o.Columns
	return toSerialize, nil
}

func (o *OrderParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"columns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderParams := _OrderParams{}

	err = json.Unmarshal(bytes, &varOrderParams)

	if err != nil {
		return err
	}

	*o = OrderParams(varOrderParams)

	return err
}

type NullableOrderParams struct {
	value *OrderParams
	isSet bool
}

func (v NullableOrderParams) Get() *OrderParams {
	return v.value
}

func (v *NullableOrderParams) Set(val *OrderParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderParams(val *OrderParams) *NullableOrderParams {
	return &NullableOrderParams{value: val, isSet: true}
}

func (v NullableOrderParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


