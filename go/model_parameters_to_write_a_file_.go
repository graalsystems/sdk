/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ParametersToWriteAFile Options for reading a file (header, file path, separator,         delimiter, ...).
type ParametersToWriteAFile struct {
	JoblibReader *JoblibReader
	PickleReader *PickleReader
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ParametersToWriteAFile) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into JoblibReader
	err = json.Unmarshal(data, &dst.JoblibReader);
	if err == nil {
		jsonJoblibReader, _ := json.Marshal(dst.JoblibReader)
		if string(jsonJoblibReader) == "{}" { // empty struct
			dst.JoblibReader = nil
		} else {
			return nil // data stored in dst.JoblibReader, return on the first match
		}
	} else {
		dst.JoblibReader = nil
	}

	// try to unmarshal JSON data into PickleReader
	err = json.Unmarshal(data, &dst.PickleReader);
	if err == nil {
		jsonPickleReader, _ := json.Marshal(dst.PickleReader)
		if string(jsonPickleReader) == "{}" { // empty struct
			dst.PickleReader = nil
		} else {
			return nil // data stored in dst.PickleReader, return on the first match
		}
	} else {
		dst.PickleReader = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ParametersToWriteAFile)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ParametersToWriteAFile) MarshalJSON() ([]byte, error) {
	if src.JoblibReader != nil {
		return json.Marshal(&src.JoblibReader)
	}

	if src.PickleReader != nil {
		return json.Marshal(&src.PickleReader)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableParametersToWriteAFile struct {
	value *ParametersToWriteAFile
	isSet bool
}

func (v NullableParametersToWriteAFile) Get() *ParametersToWriteAFile {
	return v.value
}

func (v *NullableParametersToWriteAFile) Set(val *ParametersToWriteAFile) {
	v.value = val
	v.isSet = true
}

func (v NullableParametersToWriteAFile) IsSet() bool {
	return v.isSet
}

func (v *NullableParametersToWriteAFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParametersToWriteAFile(val *ParametersToWriteAFile) *NullableParametersToWriteAFile {
	return &NullableParametersToWriteAFile{value: val, isSet: true}
}

func (v NullableParametersToWriteAFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParametersToWriteAFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


