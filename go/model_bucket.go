/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// Bucket struct for Bucket
type Bucket struct {
	Id *string `json:"id,omitempty"`
	InfrastructureId *string `json:"infrastructure_id,omitempty"`
	Name *string `json:"name,omitempty"`
	MaxSize *int32 `json:"max_size,omitempty"`
	MaxObject *int32 `json:"max_object,omitempty"`
	Scope *string `json:"scope,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Locked *bool `json:"locked,omitempty"`
}

// NewBucket instantiates a new Bucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucket() *Bucket {
	this := Bucket{}
	return &this
}

// NewBucketWithDefaults instantiates a new Bucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketWithDefaults() *Bucket {
	this := Bucket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Bucket) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Bucket) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Bucket) SetId(v string) {
	o.Id = &v
}

// GetInfrastructureId returns the InfrastructureId field value if set, zero value otherwise.
func (o *Bucket) GetInfrastructureId() string {
	if o == nil || o.InfrastructureId == nil {
		var ret string
		return ret
	}
	return *o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetInfrastructureIdOk() (*string, bool) {
	if o == nil || o.InfrastructureId == nil {
		return nil, false
	}
	return o.InfrastructureId, true
}

// HasInfrastructureId returns a boolean if a field has been set.
func (o *Bucket) HasInfrastructureId() bool {
	if o != nil && o.InfrastructureId != nil {
		return true
	}

	return false
}

// SetInfrastructureId gets a reference to the given string and assigns it to the InfrastructureId field.
func (o *Bucket) SetInfrastructureId(v string) {
	o.InfrastructureId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Bucket) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Bucket) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Bucket) SetName(v string) {
	o.Name = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *Bucket) GetMaxSize() int32 {
	if o == nil || o.MaxSize == nil {
		var ret int32
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetMaxSizeOk() (*int32, bool) {
	if o == nil || o.MaxSize == nil {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *Bucket) HasMaxSize() bool {
	if o != nil && o.MaxSize != nil {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given int32 and assigns it to the MaxSize field.
func (o *Bucket) SetMaxSize(v int32) {
	o.MaxSize = &v
}

// GetMaxObject returns the MaxObject field value if set, zero value otherwise.
func (o *Bucket) GetMaxObject() int32 {
	if o == nil || o.MaxObject == nil {
		var ret int32
		return ret
	}
	return *o.MaxObject
}

// GetMaxObjectOk returns a tuple with the MaxObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetMaxObjectOk() (*int32, bool) {
	if o == nil || o.MaxObject == nil {
		return nil, false
	}
	return o.MaxObject, true
}

// HasMaxObject returns a boolean if a field has been set.
func (o *Bucket) HasMaxObject() bool {
	if o != nil && o.MaxObject != nil {
		return true
	}

	return false
}

// SetMaxObject gets a reference to the given int32 and assigns it to the MaxObject field.
func (o *Bucket) SetMaxObject(v int32) {
	o.MaxObject = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Bucket) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Bucket) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Bucket) SetScope(v string) {
	o.Scope = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Bucket) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Bucket) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Bucket) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Bucket) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Bucket) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Bucket) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *Bucket) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bucket) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *Bucket) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *Bucket) SetLocked(v bool) {
	o.Locked = &v
}

func (o Bucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.InfrastructureId != nil {
		toSerialize["infrastructure_id"] = o.InfrastructureId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.MaxSize != nil {
		toSerialize["max_size"] = o.MaxSize
	}
	if o.MaxObject != nil {
		toSerialize["max_object"] = o.MaxObject
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	return json.Marshal(toSerialize)
}

type NullableBucket struct {
	value *Bucket
	isSet bool
}

func (v NullableBucket) Get() *Bucket {
	return v.value
}

func (v *NullableBucket) Set(val *Bucket) {
	v.value = val
	v.isSet = true
}

func (v NullableBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucket(val *Bucket) *NullableBucket {
	return &NullableBucket{value: val, isSet: true}
}

func (v NullableBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


