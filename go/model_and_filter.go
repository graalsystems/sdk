/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AndFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AndFilter{}

// AndFilter Filter values that verify all conditions.  Attributes ---------- type : RelationalOperatorType     Type of the filter. conditions : union_filter     Union of all relational filters.
type AndFilter struct {
	// Operator for AND filter.
	Type *string `json:"type,omitempty"`
	// Condition for AND filter.
	Conditions []ANDConditionInner `json:"conditions"`
}

type _AndFilter AndFilter

// NewAndFilter instantiates a new AndFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAndFilter(conditions []ANDConditionInner) *AndFilter {
	this := AndFilter{}
	var type_ string = "and"
	this.Type = &type_
	this.Conditions = conditions
	return &this
}

// NewAndFilterWithDefaults instantiates a new AndFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAndFilterWithDefaults() *AndFilter {
	this := AndFilter{}
	var type_ string = "and"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AndFilter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AndFilter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AndFilter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AndFilter) SetType(v string) {
	o.Type = &v
}

// GetConditions returns the Conditions field value
func (o *AndFilter) GetConditions() []ANDConditionInner {
	if o == nil {
		var ret []ANDConditionInner
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *AndFilter) GetConditionsOk() ([]ANDConditionInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *AndFilter) SetConditions(v []ANDConditionInner) {
	o.Conditions = v
}

func (o AndFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AndFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["conditions"] = o.Conditions
	return toSerialize, nil
}

func (o *AndFilter) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conditions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAndFilter := _AndFilter{}

	err = json.Unmarshal(bytes, &varAndFilter)

	if err != nil {
		return err
	}

	*o = AndFilter(varAndFilter)

	return err
}

type NullableAndFilter struct {
	value *AndFilter
	isSet bool
}

func (v NullableAndFilter) Get() *AndFilter {
	return v.value
}

func (v *NullableAndFilter) Set(val *AndFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAndFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAndFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAndFilter(val *AndFilter) *NullableAndFilter {
	return &NullableAndFilter{value: val, isSet: true}
}

func (v NullableAndFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAndFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


