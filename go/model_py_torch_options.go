/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// PyTorchOptions struct for PyTorchOptions
type PyTorchOptions struct {
	Options
	Type *string `json:"type,omitempty"`
	Module *string `json:"module,omitempty"`
	NumberReplicas *float32 `json:"number_replicas,omitempty"`
	MasterInstanceType *string `json:"master_instance_type,omitempty"`
	WorkerInstanceType *string `json:"worker_instance_type,omitempty"`
}

// NewPyTorchOptions instantiates a new PyTorchOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPyTorchOptions() *PyTorchOptions {
	this := PyTorchOptions{}
	var type_ string = "python"
	this.Type = &type_
	return &this
}

// NewPyTorchOptionsWithDefaults instantiates a new PyTorchOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPyTorchOptionsWithDefaults() *PyTorchOptions {
	this := PyTorchOptions{}
	var type_ string = "python"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PyTorchOptions) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PyTorchOptions) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PyTorchOptions) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PyTorchOptions) SetType(v string) {
	o.Type = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *PyTorchOptions) GetModule() string {
	if o == nil || o.Module == nil {
		var ret string
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PyTorchOptions) GetModuleOk() (*string, bool) {
	if o == nil || o.Module == nil {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *PyTorchOptions) HasModule() bool {
	if o != nil && o.Module != nil {
		return true
	}

	return false
}

// SetModule gets a reference to the given string and assigns it to the Module field.
func (o *PyTorchOptions) SetModule(v string) {
	o.Module = &v
}

// GetNumberReplicas returns the NumberReplicas field value if set, zero value otherwise.
func (o *PyTorchOptions) GetNumberReplicas() float32 {
	if o == nil || o.NumberReplicas == nil {
		var ret float32
		return ret
	}
	return *o.NumberReplicas
}

// GetNumberReplicasOk returns a tuple with the NumberReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PyTorchOptions) GetNumberReplicasOk() (*float32, bool) {
	if o == nil || o.NumberReplicas == nil {
		return nil, false
	}
	return o.NumberReplicas, true
}

// HasNumberReplicas returns a boolean if a field has been set.
func (o *PyTorchOptions) HasNumberReplicas() bool {
	if o != nil && o.NumberReplicas != nil {
		return true
	}

	return false
}

// SetNumberReplicas gets a reference to the given float32 and assigns it to the NumberReplicas field.
func (o *PyTorchOptions) SetNumberReplicas(v float32) {
	o.NumberReplicas = &v
}

// GetMasterInstanceType returns the MasterInstanceType field value if set, zero value otherwise.
func (o *PyTorchOptions) GetMasterInstanceType() string {
	if o == nil || o.MasterInstanceType == nil {
		var ret string
		return ret
	}
	return *o.MasterInstanceType
}

// GetMasterInstanceTypeOk returns a tuple with the MasterInstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PyTorchOptions) GetMasterInstanceTypeOk() (*string, bool) {
	if o == nil || o.MasterInstanceType == nil {
		return nil, false
	}
	return o.MasterInstanceType, true
}

// HasMasterInstanceType returns a boolean if a field has been set.
func (o *PyTorchOptions) HasMasterInstanceType() bool {
	if o != nil && o.MasterInstanceType != nil {
		return true
	}

	return false
}

// SetMasterInstanceType gets a reference to the given string and assigns it to the MasterInstanceType field.
func (o *PyTorchOptions) SetMasterInstanceType(v string) {
	o.MasterInstanceType = &v
}

// GetWorkerInstanceType returns the WorkerInstanceType field value if set, zero value otherwise.
func (o *PyTorchOptions) GetWorkerInstanceType() string {
	if o == nil || o.WorkerInstanceType == nil {
		var ret string
		return ret
	}
	return *o.WorkerInstanceType
}

// GetWorkerInstanceTypeOk returns a tuple with the WorkerInstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PyTorchOptions) GetWorkerInstanceTypeOk() (*string, bool) {
	if o == nil || o.WorkerInstanceType == nil {
		return nil, false
	}
	return o.WorkerInstanceType, true
}

// HasWorkerInstanceType returns a boolean if a field has been set.
func (o *PyTorchOptions) HasWorkerInstanceType() bool {
	if o != nil && o.WorkerInstanceType != nil {
		return true
	}

	return false
}

// SetWorkerInstanceType gets a reference to the given string and assigns it to the WorkerInstanceType field.
func (o *PyTorchOptions) SetWorkerInstanceType(v string) {
	o.WorkerInstanceType = &v
}

func (o PyTorchOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedOptions, errOptions := json.Marshal(o.Options)
	if errOptions != nil {
		return []byte{}, errOptions
	}
	errOptions = json.Unmarshal([]byte(serializedOptions), &toSerialize)
	if errOptions != nil {
		return []byte{}, errOptions
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Module != nil {
		toSerialize["module"] = o.Module
	}
	if o.NumberReplicas != nil {
		toSerialize["number_replicas"] = o.NumberReplicas
	}
	if o.MasterInstanceType != nil {
		toSerialize["master_instance_type"] = o.MasterInstanceType
	}
	if o.WorkerInstanceType != nil {
		toSerialize["worker_instance_type"] = o.WorkerInstanceType
	}
	return json.Marshal(toSerialize)
}

type NullablePyTorchOptions struct {
	value *PyTorchOptions
	isSet bool
}

func (v NullablePyTorchOptions) Get() *PyTorchOptions {
	return v.value
}

func (v *NullablePyTorchOptions) Set(val *PyTorchOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePyTorchOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePyTorchOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePyTorchOptions(val *PyTorchOptions) *NullablePyTorchOptions {
	return &NullablePyTorchOptions{value: val, isSet: true}
}

func (v NullablePyTorchOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePyTorchOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


