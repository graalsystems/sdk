/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SQLDataReader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SQLDataReader{}

// SQLDataReader struct for SQLDataReader
type SQLDataReader struct {
	// URL to connect to the SQL server.
	Url string `json:"url"`
	// Port to connect to the SQL server.
	Port *string `json:"port,omitempty"`
	// Name of the database in the SQL server.
	Db string `json:"db"`
	// Logical structure defining the organization,         relationships, and attributes of the database. The public schema is the         default schema where all the new tables are created.
	SchemaDb *string `json:"schema_db,omitempty"`
	// Name of the table in the database.
	Table string `json:"table"`
	// Username to connect to the SQL server.
	User string `json:"user"`
	// Password to connect to the SQL server.
	Password string `json:"password"`
	// Type of database connection
	Type *string `json:"type,omitempty"`
}

type _SQLDataReader SQLDataReader

// NewSQLDataReader instantiates a new SQLDataReader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSQLDataReader(url string, db string, table string, user string, password string) *SQLDataReader {
	this := SQLDataReader{}
	this.Url = url
	var port string = "5432"
	this.Port = &port
	this.Db = db
	var schemaDb string = "public"
	this.SchemaDb = &schemaDb
	this.Table = table
	this.User = user
	this.Password = password
	var type_ string = "jdbc"
	this.Type = &type_
	return &this
}

// NewSQLDataReaderWithDefaults instantiates a new SQLDataReader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSQLDataReaderWithDefaults() *SQLDataReader {
	this := SQLDataReader{}
	var port string = "5432"
	this.Port = &port
	var schemaDb string = "public"
	this.SchemaDb = &schemaDb
	var type_ string = "jdbc"
	this.Type = &type_
	return &this
}

// GetUrl returns the Url field value
func (o *SQLDataReader) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SQLDataReader) SetUrl(v string) {
	o.Url = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SQLDataReader) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SQLDataReader) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *SQLDataReader) SetPort(v string) {
	o.Port = &v
}

// GetDb returns the Db field value
func (o *SQLDataReader) GetDb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Db
}

// GetDbOk returns a tuple with the Db field value
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetDbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Db, true
}

// SetDb sets field value
func (o *SQLDataReader) SetDb(v string) {
	o.Db = v
}

// GetSchemaDb returns the SchemaDb field value if set, zero value otherwise.
func (o *SQLDataReader) GetSchemaDb() string {
	if o == nil || IsNil(o.SchemaDb) {
		var ret string
		return ret
	}
	return *o.SchemaDb
}

// GetSchemaDbOk returns a tuple with the SchemaDb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetSchemaDbOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaDb) {
		return nil, false
	}
	return o.SchemaDb, true
}

// HasSchemaDb returns a boolean if a field has been set.
func (o *SQLDataReader) HasSchemaDb() bool {
	if o != nil && !IsNil(o.SchemaDb) {
		return true
	}

	return false
}

// SetSchemaDb gets a reference to the given string and assigns it to the SchemaDb field.
func (o *SQLDataReader) SetSchemaDb(v string) {
	o.SchemaDb = &v
}

// GetTable returns the Table field value
func (o *SQLDataReader) GetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Table, true
}

// SetTable sets field value
func (o *SQLDataReader) SetTable(v string) {
	o.Table = v
}

// GetUser returns the User field value
func (o *SQLDataReader) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *SQLDataReader) SetUser(v string) {
	o.User = v
}

// GetPassword returns the Password field value
func (o *SQLDataReader) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SQLDataReader) SetPassword(v string) {
	o.Password = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SQLDataReader) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLDataReader) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SQLDataReader) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SQLDataReader) SetType(v string) {
	o.Type = &v
}

func (o SQLDataReader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SQLDataReader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	toSerialize["db"] = o.Db
	if !IsNil(o.SchemaDb) {
		toSerialize["schema_db"] = o.SchemaDb
	}
	toSerialize["table"] = o.Table
	toSerialize["user"] = o.User
	toSerialize["password"] = o.Password
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *SQLDataReader) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"db",
		"table",
		"user",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSQLDataReader := _SQLDataReader{}

	err = json.Unmarshal(bytes, &varSQLDataReader)

	if err != nil {
		return err
	}

	*o = SQLDataReader(varSQLDataReader)

	return err
}

type NullableSQLDataReader struct {
	value *SQLDataReader
	isSet bool
}

func (v NullableSQLDataReader) Get() *SQLDataReader {
	return v.value
}

func (v *NullableSQLDataReader) Set(val *SQLDataReader) {
	v.value = val
	v.isSet = true
}

func (v NullableSQLDataReader) IsSet() bool {
	return v.isSet
}

func (v *NullableSQLDataReader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSQLDataReader(val *SQLDataReader) *NullableSQLDataReader {
	return &NullableSQLDataReader{value: val, isSet: true}
}

func (v NullableSQLDataReader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSQLDataReader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


