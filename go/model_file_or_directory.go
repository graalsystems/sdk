/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// FileOrDirectory struct for FileOrDirectory
type FileOrDirectory struct {
	Directory *bool `json:"directory,omitempty"`
	Path *string `json:"path,omitempty"`
	Name *string `json:"name,omitempty"`
	Metadata *BlobMetadata `json:"metadata,omitempty"`
}

// NewFileOrDirectory instantiates a new FileOrDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileOrDirectory() *FileOrDirectory {
	this := FileOrDirectory{}
	return &this
}

// NewFileOrDirectoryWithDefaults instantiates a new FileOrDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileOrDirectoryWithDefaults() *FileOrDirectory {
	this := FileOrDirectory{}
	return &this
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *FileOrDirectory) GetDirectory() bool {
	if o == nil || o.Directory == nil {
		var ret bool
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileOrDirectory) GetDirectoryOk() (*bool, bool) {
	if o == nil || o.Directory == nil {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *FileOrDirectory) HasDirectory() bool {
	if o != nil && o.Directory != nil {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given bool and assigns it to the Directory field.
func (o *FileOrDirectory) SetDirectory(v bool) {
	o.Directory = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FileOrDirectory) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileOrDirectory) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FileOrDirectory) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FileOrDirectory) SetPath(v string) {
	o.Path = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileOrDirectory) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileOrDirectory) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileOrDirectory) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileOrDirectory) SetName(v string) {
	o.Name = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FileOrDirectory) GetMetadata() BlobMetadata {
	if o == nil || o.Metadata == nil {
		var ret BlobMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileOrDirectory) GetMetadataOk() (*BlobMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FileOrDirectory) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given BlobMetadata and assigns it to the Metadata field.
func (o *FileOrDirectory) SetMetadata(v BlobMetadata) {
	o.Metadata = &v
}

func (o FileOrDirectory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Directory != nil {
		toSerialize["directory"] = o.Directory
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableFileOrDirectory struct {
	value *FileOrDirectory
	isSet bool
}

func (v NullableFileOrDirectory) Get() *FileOrDirectory {
	return v.value
}

func (v *NullableFileOrDirectory) Set(val *FileOrDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableFileOrDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableFileOrDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileOrDirectory(val *FileOrDirectory) *NullableFileOrDirectory {
	return &NullableFileOrDirectory{value: val, isSet: true}
}

func (v NullableFileOrDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileOrDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


