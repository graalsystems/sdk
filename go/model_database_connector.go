/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// DatabaseConnector - Type of connector (SQL or database connector)
type DatabaseConnector struct {
	DBConnector *DBConnector
	SQLConnector *SQLConnector
}

// DBConnectorAsDatabaseConnector is a convenience function that returns DBConnector wrapped in DatabaseConnector
func DBConnectorAsDatabaseConnector(v *DBConnector) DatabaseConnector {
	return DatabaseConnector{
		DBConnector: v,
	}
}

// SQLConnectorAsDatabaseConnector is a convenience function that returns SQLConnector wrapped in DatabaseConnector
func SQLConnectorAsDatabaseConnector(v *SQLConnector) DatabaseConnector {
	return DatabaseConnector{
		SQLConnector: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DatabaseConnector) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DBConnector
	err = newStrictDecoder(data).Decode(&dst.DBConnector)
	if err == nil {
		jsonDBConnector, _ := json.Marshal(dst.DBConnector)
		if string(jsonDBConnector) == "{}" { // empty struct
			dst.DBConnector = nil
		} else {
			match++
		}
	} else {
		dst.DBConnector = nil
	}

	// try to unmarshal data into SQLConnector
	err = newStrictDecoder(data).Decode(&dst.SQLConnector)
	if err == nil {
		jsonSQLConnector, _ := json.Marshal(dst.SQLConnector)
		if string(jsonSQLConnector) == "{}" { // empty struct
			dst.SQLConnector = nil
		} else {
			match++
		}
	} else {
		dst.SQLConnector = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DBConnector = nil
		dst.SQLConnector = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DatabaseConnector)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DatabaseConnector)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DatabaseConnector) MarshalJSON() ([]byte, error) {
	if src.DBConnector != nil {
		return json.Marshal(&src.DBConnector)
	}

	if src.SQLConnector != nil {
		return json.Marshal(&src.SQLConnector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DatabaseConnector) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DBConnector != nil {
		return obj.DBConnector
	}

	if obj.SQLConnector != nil {
		return obj.SQLConnector
	}

	// all schemas are nil
	return nil
}

type NullableDatabaseConnector struct {
	value *DatabaseConnector
	isSet bool
}

func (v NullableDatabaseConnector) Get() *DatabaseConnector {
	return v.value
}

func (v *NullableDatabaseConnector) Set(val *DatabaseConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseConnector(val *DatabaseConnector) *NullableDatabaseConnector {
	return &NullableDatabaseConnector{value: val, isSet: true}
}

func (v NullableDatabaseConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


