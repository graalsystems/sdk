/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the LoadModelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadModelParams{}

// LoadModelParams struct for LoadModelParams
type LoadModelParams struct {
	// Type of object model.
	Type *string `json:"type,omitempty"`
	Connector Connector `json:"connector"`
	Object ParametersToWriteAFile `json:"object"`
}

type _LoadModelParams LoadModelParams

// NewLoadModelParams instantiates a new LoadModelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadModelParams(connector Connector, object ParametersToWriteAFile) *LoadModelParams {
	this := LoadModelParams{}
	var type_ string = "model"
	this.Type = &type_
	this.Connector = connector
	this.Object = object
	return &this
}

// NewLoadModelParamsWithDefaults instantiates a new LoadModelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadModelParamsWithDefaults() *LoadModelParams {
	this := LoadModelParams{}
	var type_ string = "model"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LoadModelParams) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadModelParams) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LoadModelParams) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LoadModelParams) SetType(v string) {
	o.Type = &v
}

// GetConnector returns the Connector field value
func (o *LoadModelParams) GetConnector() Connector {
	if o == nil {
		var ret Connector
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *LoadModelParams) GetConnectorOk() (*Connector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *LoadModelParams) SetConnector(v Connector) {
	o.Connector = v
}

// GetObject returns the Object field value
func (o *LoadModelParams) GetObject() ParametersToWriteAFile {
	if o == nil {
		var ret ParametersToWriteAFile
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *LoadModelParams) GetObjectOk() (*ParametersToWriteAFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *LoadModelParams) SetObject(v ParametersToWriteAFile) {
	o.Object = v
}

func (o LoadModelParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadModelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["connector"] = o.Connector
	toSerialize["object"] = o.Object
	return toSerialize, nil
}

func (o *LoadModelParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connector",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadModelParams := _LoadModelParams{}

	err = json.Unmarshal(bytes, &varLoadModelParams)

	if err != nil {
		return err
	}

	*o = LoadModelParams(varLoadModelParams)

	return err
}

type NullableLoadModelParams struct {
	value *LoadModelParams
	isSet bool
}

func (v NullableLoadModelParams) Get() *LoadModelParams {
	return v.value
}

func (v *NullableLoadModelParams) Set(val *LoadModelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadModelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadModelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadModelParams(val *LoadModelParams) *NullableLoadModelParams {
	return &NullableLoadModelParams{value: val, isSet: true}
}

func (v NullableLoadModelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadModelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


