/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// checks if the ValidityAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidityAction{}

// ValidityAction Validity Request.
type ValidityAction struct {
	Type *string `json:"type,omitempty"`
	Language *EtlDagSchemasEnumsLanguageType `json:"language,omitempty"`
	Dag Dag `json:"dag"`
}

type _ValidityAction ValidityAction

// NewValidityAction instantiates a new ValidityAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidityAction(dag Dag) *ValidityAction {
	this := ValidityAction{}
	var type_ string = "verify"
	this.Type = &type_
	this.Dag = dag
	return &this
}

// NewValidityActionWithDefaults instantiates a new ValidityAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidityActionWithDefaults() *ValidityAction {
	this := ValidityAction{}
	var type_ string = "verify"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ValidityAction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidityAction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ValidityAction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ValidityAction) SetType(v string) {
	o.Type = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ValidityAction) GetLanguage() EtlDagSchemasEnumsLanguageType {
	if o == nil || IsNil(o.Language) {
		var ret EtlDagSchemasEnumsLanguageType
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidityAction) GetLanguageOk() (*EtlDagSchemasEnumsLanguageType, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ValidityAction) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given EtlDagSchemasEnumsLanguageType and assigns it to the Language field.
func (o *ValidityAction) SetLanguage(v EtlDagSchemasEnumsLanguageType) {
	o.Language = &v
}

// GetDag returns the Dag field value
func (o *ValidityAction) GetDag() Dag {
	if o == nil {
		var ret Dag
		return ret
	}

	return o.Dag
}

// GetDagOk returns a tuple with the Dag field value
// and a boolean to check if the value has been set.
func (o *ValidityAction) GetDagOk() (*Dag, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dag, true
}

// SetDag sets field value
func (o *ValidityAction) SetDag(v Dag) {
	o.Dag = v
}

func (o ValidityAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidityAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	toSerialize["dag"] = o.Dag
	return toSerialize, nil
}

func (o *ValidityAction) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidityAction := _ValidityAction{}

	err = json.Unmarshal(bytes, &varValidityAction)

	if err != nil {
		return err
	}

	*o = ValidityAction(varValidityAction)

	return err
}

type NullableValidityAction struct {
	value *ValidityAction
	isSet bool
}

func (v NullableValidityAction) Get() *ValidityAction {
	return v.value
}

func (v *NullableValidityAction) Set(val *ValidityAction) {
	v.value = val
	v.isSet = true
}

func (v NullableValidityAction) IsSet() bool {
	return v.isSet
}

func (v *NullableValidityAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidityAction(val *ValidityAction) *NullableValidityAction {
	return &NullableValidityAction{value: val, isSet: true}
}

func (v NullableValidityAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidityAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


