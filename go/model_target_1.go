/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// Target1 - struct for Target1
type Target1 struct {
	Project1 *Project1
	User1 *User1
}

// Project1AsTarget1 is a convenience function that returns Project1 wrapped in Target1
func Project1AsTarget1(v *Project1) Target1 {
	return Target1{
		Project1: v,
	}
}

// User1AsTarget1 is a convenience function that returns User1 wrapped in Target1
func User1AsTarget1(v *User1) Target1 {
	return Target1{
		User1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Target1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Project1
	err = newStrictDecoder(data).Decode(&dst.Project1)
	if err == nil {
		jsonProject1, _ := json.Marshal(dst.Project1)
		if string(jsonProject1) == "{}" { // empty struct
			dst.Project1 = nil
		} else {
			match++
		}
	} else {
		dst.Project1 = nil
	}

	// try to unmarshal data into User1
	err = newStrictDecoder(data).Decode(&dst.User1)
	if err == nil {
		jsonUser1, _ := json.Marshal(dst.User1)
		if string(jsonUser1) == "{}" { // empty struct
			dst.User1 = nil
		} else {
			match++
		}
	} else {
		dst.User1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Project1 = nil
		dst.User1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Target1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Target1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Target1) MarshalJSON() ([]byte, error) {
	if src.Project1 != nil {
		return json.Marshal(&src.Project1)
	}

	if src.User1 != nil {
		return json.Marshal(&src.User1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Target1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Project1 != nil {
		return obj.Project1
	}

	if obj.User1 != nil {
		return obj.User1
	}

	// all schemas are nil
	return nil
}

type NullableTarget1 struct {
	value *Target1
	isSet bool
}

func (v NullableTarget1) Get() *Target1 {
	return v.value
}

func (v *NullableTarget1) Set(val *Target1) {
	v.value = val
	v.isSet = true
}

func (v NullableTarget1) IsSet() bool {
	return v.isSet
}

func (v *NullableTarget1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTarget1(val *Target1) *NullableTarget1 {
	return &NullableTarget1{value: val, isSet: true}
}

func (v NullableTarget1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTarget1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


