/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems/sdk

import (
	"encoding/json"
)

// KubernetesTarget struct for KubernetesTarget
type KubernetesTarget struct {
	Target
	Type *string `json:"type,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
	Mode *string `json:"mode,omitempty"`
	Context *string `json:"context,omitempty"`
	Kubeconfig *string `json:"kubeconfig,omitempty"`
}

// NewKubernetesTarget instantiates a new KubernetesTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesTarget() *KubernetesTarget {
	this := KubernetesTarget{}
	var type_ string = "kubernetes"
	this.Type = &type_
	return &this
}

// NewKubernetesTargetWithDefaults instantiates a new KubernetesTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesTargetWithDefaults() *KubernetesTarget {
	this := KubernetesTarget{}
	var type_ string = "kubernetes"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KubernetesTarget) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesTarget) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KubernetesTarget) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KubernetesTarget) SetType(v string) {
	o.Type = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *KubernetesTarget) GetSubtype() string {
	if o == nil || o.Subtype == nil {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesTarget) GetSubtypeOk() (*string, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *KubernetesTarget) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *KubernetesTarget) SetSubtype(v string) {
	o.Subtype = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *KubernetesTarget) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesTarget) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *KubernetesTarget) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *KubernetesTarget) SetMode(v string) {
	o.Mode = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *KubernetesTarget) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesTarget) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *KubernetesTarget) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *KubernetesTarget) SetContext(v string) {
	o.Context = &v
}

// GetKubeconfig returns the Kubeconfig field value if set, zero value otherwise.
func (o *KubernetesTarget) GetKubeconfig() string {
	if o == nil || o.Kubeconfig == nil {
		var ret string
		return ret
	}
	return *o.Kubeconfig
}

// GetKubeconfigOk returns a tuple with the Kubeconfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesTarget) GetKubeconfigOk() (*string, bool) {
	if o == nil || o.Kubeconfig == nil {
		return nil, false
	}
	return o.Kubeconfig, true
}

// HasKubeconfig returns a boolean if a field has been set.
func (o *KubernetesTarget) HasKubeconfig() bool {
	if o != nil && o.Kubeconfig != nil {
		return true
	}

	return false
}

// SetKubeconfig gets a reference to the given string and assigns it to the Kubeconfig field.
func (o *KubernetesTarget) SetKubeconfig(v string) {
	o.Kubeconfig = &v
}

func (o KubernetesTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTarget, errTarget := json.Marshal(o.Target)
	if errTarget != nil {
		return []byte{}, errTarget
	}
	errTarget = json.Unmarshal([]byte(serializedTarget), &toSerialize)
	if errTarget != nil {
		return []byte{}, errTarget
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Kubeconfig != nil {
		toSerialize["kubeconfig"] = o.Kubeconfig
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesTarget struct {
	value *KubernetesTarget
	isSet bool
}

func (v NullableKubernetesTarget) Get() *KubernetesTarget {
	return v.value
}

func (v *NullableKubernetesTarget) Set(val *KubernetesTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesTarget(val *KubernetesTarget) *NullableKubernetesTarget {
	return &NullableKubernetesTarget{value: val, isSet: true}
}

func (v NullableKubernetesTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


