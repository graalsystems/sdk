/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ReadSQLParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReadSQLParams{}

// ReadSQLParams struct for ReadSQLParams
type ReadSQLParams struct {
	// Type SQL server.
	Type *string `json:"type,omitempty"`
	Object SQLDataReader `json:"object"`
	// List of dictionaries representing the columns (name and type). For each dictionnary the         'name' represents the column name and the 'type' their corresponding type.
	Structure []map[string]string `json:"structure,omitempty"`
	Connector DatabaseConnector `json:"connector"`
}

type _ReadSQLParams ReadSQLParams

// NewReadSQLParams instantiates a new ReadSQLParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadSQLParams(object SQLDataReader, connector DatabaseConnector) *ReadSQLParams {
	this := ReadSQLParams{}
	var type_ string = "sql"
	this.Type = &type_
	this.Object = object
	this.Connector = connector
	return &this
}

// NewReadSQLParamsWithDefaults instantiates a new ReadSQLParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadSQLParamsWithDefaults() *ReadSQLParams {
	this := ReadSQLParams{}
	var type_ string = "sql"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReadSQLParams) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadSQLParams) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReadSQLParams) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReadSQLParams) SetType(v string) {
	o.Type = &v
}

// GetObject returns the Object field value
func (o *ReadSQLParams) GetObject() SQLDataReader {
	if o == nil {
		var ret SQLDataReader
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ReadSQLParams) GetObjectOk() (*SQLDataReader, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ReadSQLParams) SetObject(v SQLDataReader) {
	o.Object = v
}

// GetStructure returns the Structure field value if set, zero value otherwise.
func (o *ReadSQLParams) GetStructure() []map[string]string {
	if o == nil || IsNil(o.Structure) {
		var ret []map[string]string
		return ret
	}
	return o.Structure
}

// GetStructureOk returns a tuple with the Structure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadSQLParams) GetStructureOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Structure) {
		return nil, false
	}
	return o.Structure, true
}

// HasStructure returns a boolean if a field has been set.
func (o *ReadSQLParams) HasStructure() bool {
	if o != nil && !IsNil(o.Structure) {
		return true
	}

	return false
}

// SetStructure gets a reference to the given []map[string]string and assigns it to the Structure field.
func (o *ReadSQLParams) SetStructure(v []map[string]string) {
	o.Structure = v
}

// GetConnector returns the Connector field value
func (o *ReadSQLParams) GetConnector() DatabaseConnector {
	if o == nil {
		var ret DatabaseConnector
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *ReadSQLParams) GetConnectorOk() (*DatabaseConnector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *ReadSQLParams) SetConnector(v DatabaseConnector) {
	o.Connector = v
}

func (o ReadSQLParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReadSQLParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["object"] = o.Object
	if !IsNil(o.Structure) {
		toSerialize["structure"] = o.Structure
	}
	toSerialize["connector"] = o.Connector
	return toSerialize, nil
}

func (o *ReadSQLParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"connector",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReadSQLParams := _ReadSQLParams{}

	err = json.Unmarshal(bytes, &varReadSQLParams)

	if err != nil {
		return err
	}

	*o = ReadSQLParams(varReadSQLParams)

	return err
}

type NullableReadSQLParams struct {
	value *ReadSQLParams
	isSet bool
}

func (v NullableReadSQLParams) Get() *ReadSQLParams {
	return v.value
}

func (v *NullableReadSQLParams) Set(val *ReadSQLParams) {
	v.value = val
	v.isSet = true
}

func (v NullableReadSQLParams) IsSet() bool {
	return v.isSet
}

func (v *NullableReadSQLParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadSQLParams(val *ReadSQLParams) *NullableReadSQLParams {
	return &NullableReadSQLParams{value: val, isSet: true}
}

func (v NullableReadSQLParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadSQLParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


