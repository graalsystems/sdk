/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"time"
)

// checks if the TrialDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrialDetails{}

// TrialDetails struct for TrialDetails
type TrialDetails struct {
	Details1
	Type *string `json:"type,omitempty"`
	Expire *time.Time `json:"expire,omitempty"`
}

// NewTrialDetails instantiates a new TrialDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrialDetails() *TrialDetails {
	this := TrialDetails{}
	var type_ string = "trial"
	this.Type = &type_
	return &this
}

// NewTrialDetailsWithDefaults instantiates a new TrialDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrialDetailsWithDefaults() *TrialDetails {
	this := TrialDetails{}
	var type_ string = "trial"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TrialDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrialDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TrialDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TrialDetails) SetType(v string) {
	o.Type = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *TrialDetails) GetExpire() time.Time {
	if o == nil || IsNil(o.Expire) {
		var ret time.Time
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrialDetails) GetExpireOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *TrialDetails) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given time.Time and assigns it to the Expire field.
func (o *TrialDetails) SetExpire(v time.Time) {
	o.Expire = &v
}

func (o TrialDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrialDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDetails1, errDetails1 := json.Marshal(o.Details1)
	if errDetails1 != nil {
		return map[string]interface{}{}, errDetails1
	}
	errDetails1 = json.Unmarshal([]byte(serializedDetails1), &toSerialize)
	if errDetails1 != nil {
		return map[string]interface{}{}, errDetails1
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	return toSerialize, nil
}

type NullableTrialDetails struct {
	value *TrialDetails
	isSet bool
}

func (v NullableTrialDetails) Get() *TrialDetails {
	return v.value
}

func (v *NullableTrialDetails) Set(val *TrialDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTrialDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTrialDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrialDetails(val *TrialDetails) *NullableTrialDetails {
	return &NullableTrialDetails{value: val, isSet: true}
}

func (v NullableTrialDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrialDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


