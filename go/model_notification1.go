/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems/sdk

import (
	"encoding/json"
)

// Notification1 struct for Notification1
type Notification1 struct {
	Id *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Infos *string `json:"infos,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
}

// NewNotification1 instantiates a new Notification1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotification1() *Notification1 {
	this := Notification1{}
	return &this
}

// NewNotification1WithDefaults instantiates a new Notification1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotification1WithDefaults() *Notification1 {
	this := Notification1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Notification1) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification1) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Notification1) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Notification1) SetId(v string) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Notification1) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification1) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Notification1) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Notification1) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Notification1) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification1) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Notification1) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Notification1) SetDescription(v string) {
	o.Description = &v
}

// GetInfos returns the Infos field value if set, zero value otherwise.
func (o *Notification1) GetInfos() string {
	if o == nil || o.Infos == nil {
		var ret string
		return ret
	}
	return *o.Infos
}

// GetInfosOk returns a tuple with the Infos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification1) GetInfosOk() (*string, bool) {
	if o == nil || o.Infos == nil {
		return nil, false
	}
	return o.Infos, true
}

// HasInfos returns a boolean if a field has been set.
func (o *Notification1) HasInfos() bool {
	if o != nil && o.Infos != nil {
		return true
	}

	return false
}

// SetInfos gets a reference to the given string and assigns it to the Infos field.
func (o *Notification1) SetInfos(v string) {
	o.Infos = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Notification1) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification1) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Notification1) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *Notification1) SetSeverity(v string) {
	o.Severity = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Notification1) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notification1) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Notification1) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Notification1) SetTags(v []string) {
	o.Tags = &v
}

func (o Notification1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Infos != nil {
		toSerialize["infos"] = o.Infos
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableNotification1 struct {
	value *Notification1
	isSet bool
}

func (v NullableNotification1) Get() *Notification1 {
	return v.value
}

func (v *NullableNotification1) Set(val *Notification1) {
	v.value = val
	v.isSet = true
}

func (v NullableNotification1) IsSet() bool {
	return v.isSet
}

func (v *NullableNotification1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotification1(val *Notification1) *NullableNotification1 {
	return &NullableNotification1{value: val, isSet: true}
}

func (v NullableNotification1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotification1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


