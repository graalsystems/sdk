/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
)

// checks if the SepaDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SepaDetails{}

// SepaDetails struct for SepaDetails
type SepaDetails struct {
	Details1
	Type *string `json:"type,omitempty"`
	Iban *string `json:"iban,omitempty"`
	BankCode *string `json:"bank_code,omitempty"`
	Country *string `json:"country,omitempty"`
	BranchCode *string `json:"branch_code,omitempty"`
}

// NewSepaDetails instantiates a new SepaDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSepaDetails() *SepaDetails {
	this := SepaDetails{}
	var type_ string = "sepa"
	this.Type = &type_
	return &this
}

// NewSepaDetailsWithDefaults instantiates a new SepaDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSepaDetailsWithDefaults() *SepaDetails {
	this := SepaDetails{}
	var type_ string = "sepa"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SepaDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SepaDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SepaDetails) SetType(v string) {
	o.Type = &v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *SepaDetails) GetIban() string {
	if o == nil || IsNil(o.Iban) {
		var ret string
		return ret
	}
	return *o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetails) GetIbanOk() (*string, bool) {
	if o == nil || IsNil(o.Iban) {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *SepaDetails) HasIban() bool {
	if o != nil && !IsNil(o.Iban) {
		return true
	}

	return false
}

// SetIban gets a reference to the given string and assigns it to the Iban field.
func (o *SepaDetails) SetIban(v string) {
	o.Iban = &v
}

// GetBankCode returns the BankCode field value if set, zero value otherwise.
func (o *SepaDetails) GetBankCode() string {
	if o == nil || IsNil(o.BankCode) {
		var ret string
		return ret
	}
	return *o.BankCode
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetails) GetBankCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BankCode) {
		return nil, false
	}
	return o.BankCode, true
}

// HasBankCode returns a boolean if a field has been set.
func (o *SepaDetails) HasBankCode() bool {
	if o != nil && !IsNil(o.BankCode) {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given string and assigns it to the BankCode field.
func (o *SepaDetails) SetBankCode(v string) {
	o.BankCode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SepaDetails) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetails) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SepaDetails) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SepaDetails) SetCountry(v string) {
	o.Country = &v
}

// GetBranchCode returns the BranchCode field value if set, zero value otherwise.
func (o *SepaDetails) GetBranchCode() string {
	if o == nil || IsNil(o.BranchCode) {
		var ret string
		return ret
	}
	return *o.BranchCode
}

// GetBranchCodeOk returns a tuple with the BranchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SepaDetails) GetBranchCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BranchCode) {
		return nil, false
	}
	return o.BranchCode, true
}

// HasBranchCode returns a boolean if a field has been set.
func (o *SepaDetails) HasBranchCode() bool {
	if o != nil && !IsNil(o.BranchCode) {
		return true
	}

	return false
}

// SetBranchCode gets a reference to the given string and assigns it to the BranchCode field.
func (o *SepaDetails) SetBranchCode(v string) {
	o.BranchCode = &v
}

func (o SepaDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SepaDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDetails1, errDetails1 := json.Marshal(o.Details1)
	if errDetails1 != nil {
		return map[string]interface{}{}, errDetails1
	}
	errDetails1 = json.Unmarshal([]byte(serializedDetails1), &toSerialize)
	if errDetails1 != nil {
		return map[string]interface{}{}, errDetails1
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Iban) {
		toSerialize["iban"] = o.Iban
	}
	if !IsNil(o.BankCode) {
		toSerialize["bank_code"] = o.BankCode
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.BranchCode) {
		toSerialize["branch_code"] = o.BranchCode
	}
	return toSerialize, nil
}

type NullableSepaDetails struct {
	value *SepaDetails
	isSet bool
}

func (v NullableSepaDetails) Get() *SepaDetails {
	return v.value
}

func (v *NullableSepaDetails) Set(val *SepaDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSepaDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSepaDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSepaDetails(val *SepaDetails) *NullableSepaDetails {
	return &NullableSepaDetails{value: val, isSet: true}
}

func (v NullableSepaDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSepaDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


