/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems

import (
	"encoding/json"
	"fmt"
)

// TaskListInner - struct for TaskListInner
type TaskListInner struct {
	AggTask *AggTask
	DistinctTask *DistinctTask
	DropTask *DropTask
	FilterTask *FilterTask
	JoinTask *JoinTask
	OrderTask *OrderTask
	PredictModelTask *PredictModelTask
	PrintTask *PrintTask
	ReadTask *ReadTask
	RenameTask *RenameTask
	TrainModelTask *TrainModelTask
	WriteTask *WriteTask
}

// AggTaskAsTaskListInner is a convenience function that returns AggTask wrapped in TaskListInner
func AggTaskAsTaskListInner(v *AggTask) TaskListInner {
	return TaskListInner{
		AggTask: v,
	}
}

// DistinctTaskAsTaskListInner is a convenience function that returns DistinctTask wrapped in TaskListInner
func DistinctTaskAsTaskListInner(v *DistinctTask) TaskListInner {
	return TaskListInner{
		DistinctTask: v,
	}
}

// DropTaskAsTaskListInner is a convenience function that returns DropTask wrapped in TaskListInner
func DropTaskAsTaskListInner(v *DropTask) TaskListInner {
	return TaskListInner{
		DropTask: v,
	}
}

// FilterTaskAsTaskListInner is a convenience function that returns FilterTask wrapped in TaskListInner
func FilterTaskAsTaskListInner(v *FilterTask) TaskListInner {
	return TaskListInner{
		FilterTask: v,
	}
}

// JoinTaskAsTaskListInner is a convenience function that returns JoinTask wrapped in TaskListInner
func JoinTaskAsTaskListInner(v *JoinTask) TaskListInner {
	return TaskListInner{
		JoinTask: v,
	}
}

// OrderTaskAsTaskListInner is a convenience function that returns OrderTask wrapped in TaskListInner
func OrderTaskAsTaskListInner(v *OrderTask) TaskListInner {
	return TaskListInner{
		OrderTask: v,
	}
}

// PredictModelTaskAsTaskListInner is a convenience function that returns PredictModelTask wrapped in TaskListInner
func PredictModelTaskAsTaskListInner(v *PredictModelTask) TaskListInner {
	return TaskListInner{
		PredictModelTask: v,
	}
}

// PrintTaskAsTaskListInner is a convenience function that returns PrintTask wrapped in TaskListInner
func PrintTaskAsTaskListInner(v *PrintTask) TaskListInner {
	return TaskListInner{
		PrintTask: v,
	}
}

// ReadTaskAsTaskListInner is a convenience function that returns ReadTask wrapped in TaskListInner
func ReadTaskAsTaskListInner(v *ReadTask) TaskListInner {
	return TaskListInner{
		ReadTask: v,
	}
}

// RenameTaskAsTaskListInner is a convenience function that returns RenameTask wrapped in TaskListInner
func RenameTaskAsTaskListInner(v *RenameTask) TaskListInner {
	return TaskListInner{
		RenameTask: v,
	}
}

// TrainModelTaskAsTaskListInner is a convenience function that returns TrainModelTask wrapped in TaskListInner
func TrainModelTaskAsTaskListInner(v *TrainModelTask) TaskListInner {
	return TaskListInner{
		TrainModelTask: v,
	}
}

// WriteTaskAsTaskListInner is a convenience function that returns WriteTask wrapped in TaskListInner
func WriteTaskAsTaskListInner(v *WriteTask) TaskListInner {
	return TaskListInner{
		WriteTask: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TaskListInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AggTask
	err = newStrictDecoder(data).Decode(&dst.AggTask)
	if err == nil {
		jsonAggTask, _ := json.Marshal(dst.AggTask)
		if string(jsonAggTask) == "{}" { // empty struct
			dst.AggTask = nil
		} else {
			match++
		}
	} else {
		dst.AggTask = nil
	}

	// try to unmarshal data into DistinctTask
	err = newStrictDecoder(data).Decode(&dst.DistinctTask)
	if err == nil {
		jsonDistinctTask, _ := json.Marshal(dst.DistinctTask)
		if string(jsonDistinctTask) == "{}" { // empty struct
			dst.DistinctTask = nil
		} else {
			match++
		}
	} else {
		dst.DistinctTask = nil
	}

	// try to unmarshal data into DropTask
	err = newStrictDecoder(data).Decode(&dst.DropTask)
	if err == nil {
		jsonDropTask, _ := json.Marshal(dst.DropTask)
		if string(jsonDropTask) == "{}" { // empty struct
			dst.DropTask = nil
		} else {
			match++
		}
	} else {
		dst.DropTask = nil
	}

	// try to unmarshal data into FilterTask
	err = newStrictDecoder(data).Decode(&dst.FilterTask)
	if err == nil {
		jsonFilterTask, _ := json.Marshal(dst.FilterTask)
		if string(jsonFilterTask) == "{}" { // empty struct
			dst.FilterTask = nil
		} else {
			match++
		}
	} else {
		dst.FilterTask = nil
	}

	// try to unmarshal data into JoinTask
	err = newStrictDecoder(data).Decode(&dst.JoinTask)
	if err == nil {
		jsonJoinTask, _ := json.Marshal(dst.JoinTask)
		if string(jsonJoinTask) == "{}" { // empty struct
			dst.JoinTask = nil
		} else {
			match++
		}
	} else {
		dst.JoinTask = nil
	}

	// try to unmarshal data into OrderTask
	err = newStrictDecoder(data).Decode(&dst.OrderTask)
	if err == nil {
		jsonOrderTask, _ := json.Marshal(dst.OrderTask)
		if string(jsonOrderTask) == "{}" { // empty struct
			dst.OrderTask = nil
		} else {
			match++
		}
	} else {
		dst.OrderTask = nil
	}

	// try to unmarshal data into PredictModelTask
	err = newStrictDecoder(data).Decode(&dst.PredictModelTask)
	if err == nil {
		jsonPredictModelTask, _ := json.Marshal(dst.PredictModelTask)
		if string(jsonPredictModelTask) == "{}" { // empty struct
			dst.PredictModelTask = nil
		} else {
			match++
		}
	} else {
		dst.PredictModelTask = nil
	}

	// try to unmarshal data into PrintTask
	err = newStrictDecoder(data).Decode(&dst.PrintTask)
	if err == nil {
		jsonPrintTask, _ := json.Marshal(dst.PrintTask)
		if string(jsonPrintTask) == "{}" { // empty struct
			dst.PrintTask = nil
		} else {
			match++
		}
	} else {
		dst.PrintTask = nil
	}

	// try to unmarshal data into ReadTask
	err = newStrictDecoder(data).Decode(&dst.ReadTask)
	if err == nil {
		jsonReadTask, _ := json.Marshal(dst.ReadTask)
		if string(jsonReadTask) == "{}" { // empty struct
			dst.ReadTask = nil
		} else {
			match++
		}
	} else {
		dst.ReadTask = nil
	}

	// try to unmarshal data into RenameTask
	err = newStrictDecoder(data).Decode(&dst.RenameTask)
	if err == nil {
		jsonRenameTask, _ := json.Marshal(dst.RenameTask)
		if string(jsonRenameTask) == "{}" { // empty struct
			dst.RenameTask = nil
		} else {
			match++
		}
	} else {
		dst.RenameTask = nil
	}

	// try to unmarshal data into TrainModelTask
	err = newStrictDecoder(data).Decode(&dst.TrainModelTask)
	if err == nil {
		jsonTrainModelTask, _ := json.Marshal(dst.TrainModelTask)
		if string(jsonTrainModelTask) == "{}" { // empty struct
			dst.TrainModelTask = nil
		} else {
			match++
		}
	} else {
		dst.TrainModelTask = nil
	}

	// try to unmarshal data into WriteTask
	err = newStrictDecoder(data).Decode(&dst.WriteTask)
	if err == nil {
		jsonWriteTask, _ := json.Marshal(dst.WriteTask)
		if string(jsonWriteTask) == "{}" { // empty struct
			dst.WriteTask = nil
		} else {
			match++
		}
	} else {
		dst.WriteTask = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AggTask = nil
		dst.DistinctTask = nil
		dst.DropTask = nil
		dst.FilterTask = nil
		dst.JoinTask = nil
		dst.OrderTask = nil
		dst.PredictModelTask = nil
		dst.PrintTask = nil
		dst.ReadTask = nil
		dst.RenameTask = nil
		dst.TrainModelTask = nil
		dst.WriteTask = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TaskListInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TaskListInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TaskListInner) MarshalJSON() ([]byte, error) {
	if src.AggTask != nil {
		return json.Marshal(&src.AggTask)
	}

	if src.DistinctTask != nil {
		return json.Marshal(&src.DistinctTask)
	}

	if src.DropTask != nil {
		return json.Marshal(&src.DropTask)
	}

	if src.FilterTask != nil {
		return json.Marshal(&src.FilterTask)
	}

	if src.JoinTask != nil {
		return json.Marshal(&src.JoinTask)
	}

	if src.OrderTask != nil {
		return json.Marshal(&src.OrderTask)
	}

	if src.PredictModelTask != nil {
		return json.Marshal(&src.PredictModelTask)
	}

	if src.PrintTask != nil {
		return json.Marshal(&src.PrintTask)
	}

	if src.ReadTask != nil {
		return json.Marshal(&src.ReadTask)
	}

	if src.RenameTask != nil {
		return json.Marshal(&src.RenameTask)
	}

	if src.TrainModelTask != nil {
		return json.Marshal(&src.TrainModelTask)
	}

	if src.WriteTask != nil {
		return json.Marshal(&src.WriteTask)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TaskListInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AggTask != nil {
		return obj.AggTask
	}

	if obj.DistinctTask != nil {
		return obj.DistinctTask
	}

	if obj.DropTask != nil {
		return obj.DropTask
	}

	if obj.FilterTask != nil {
		return obj.FilterTask
	}

	if obj.JoinTask != nil {
		return obj.JoinTask
	}

	if obj.OrderTask != nil {
		return obj.OrderTask
	}

	if obj.PredictModelTask != nil {
		return obj.PredictModelTask
	}

	if obj.PrintTask != nil {
		return obj.PrintTask
	}

	if obj.ReadTask != nil {
		return obj.ReadTask
	}

	if obj.RenameTask != nil {
		return obj.RenameTask
	}

	if obj.TrainModelTask != nil {
		return obj.TrainModelTask
	}

	if obj.WriteTask != nil {
		return obj.WriteTask
	}

	// all schemas are nil
	return nil
}

type NullableTaskListInner struct {
	value *TaskListInner
	isSet bool
}

func (v NullableTaskListInner) Get() *TaskListInner {
	return v.value
}

func (v *NullableTaskListInner) Set(val *TaskListInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskListInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskListInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskListInner(val *TaskListInner) *NullableTaskListInner {
	return &NullableTaskListInner{value: val, isSet: true}
}

func (v NullableTaskListInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskListInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


