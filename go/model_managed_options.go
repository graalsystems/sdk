/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ManagedOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedOptions{}

// ManagedOptions struct for ManagedOptions
type ManagedOptions struct {
	Env *map[string]string `json:"env,omitempty"`
	InstanceType *string `json:"instance_type,omitempty"`
}

// NewManagedOptions instantiates a new ManagedOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedOptions() *ManagedOptions {
	this := ManagedOptions{}
	return &this
}

// NewManagedOptionsWithDefaults instantiates a new ManagedOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedOptionsWithDefaults() *ManagedOptions {
	this := ManagedOptions{}
	return &this
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *ManagedOptions) GetEnv() map[string]string {
	if o == nil || IsNil(o.Env) {
		var ret map[string]string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedOptions) GetEnvOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *ManagedOptions) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]string and assigns it to the Env field.
func (o *ManagedOptions) SetEnv(v map[string]string) {
	o.Env = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *ManagedOptions) GetInstanceType() string {
	if o == nil || IsNil(o.InstanceType) {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedOptions) GetInstanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceType) {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *ManagedOptions) HasInstanceType() bool {
	if o != nil && !IsNil(o.InstanceType) {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *ManagedOptions) SetInstanceType(v string) {
	o.InstanceType = &v
}

func (o ManagedOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.InstanceType) {
		toSerialize["instance_type"] = o.InstanceType
	}
	return toSerialize, nil
}

type NullableManagedOptions struct {
	value *ManagedOptions
	isSet bool
}

func (v NullableManagedOptions) Get() *ManagedOptions {
	return v.value
}

func (v *NullableManagedOptions) Set(val *ManagedOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedOptions(val *ManagedOptions) *NullableManagedOptions {
	return &NullableManagedOptions{value: val, isSet: true}
}

func (v NullableManagedOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


