/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// Connector1 - Type of connector (local, S3, Azure).
type Connector1 struct {
	AzureConnector *AzureConnector
	LocalConnector *LocalConnector
	S3Connector *S3Connector
}

// AzureConnectorAsConnector1 is a convenience function that returns AzureConnector wrapped in Connector1
func AzureConnectorAsConnector1(v *AzureConnector) Connector1 {
	return Connector1{
		AzureConnector: v,
	}
}

// LocalConnectorAsConnector1 is a convenience function that returns LocalConnector wrapped in Connector1
func LocalConnectorAsConnector1(v *LocalConnector) Connector1 {
	return Connector1{
		LocalConnector: v,
	}
}

// S3ConnectorAsConnector1 is a convenience function that returns S3Connector wrapped in Connector1
func S3ConnectorAsConnector1(v *S3Connector) Connector1 {
	return Connector1{
		S3Connector: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Connector1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AzureConnector
	err = newStrictDecoder(data).Decode(&dst.AzureConnector)
	if err == nil {
		jsonAzureConnector, _ := json.Marshal(dst.AzureConnector)
		if string(jsonAzureConnector) == "{}" { // empty struct
			dst.AzureConnector = nil
		} else {
			match++
		}
	} else {
		dst.AzureConnector = nil
	}

	// try to unmarshal data into LocalConnector
	err = newStrictDecoder(data).Decode(&dst.LocalConnector)
	if err == nil {
		jsonLocalConnector, _ := json.Marshal(dst.LocalConnector)
		if string(jsonLocalConnector) == "{}" { // empty struct
			dst.LocalConnector = nil
		} else {
			match++
		}
	} else {
		dst.LocalConnector = nil
	}

	// try to unmarshal data into S3Connector
	err = newStrictDecoder(data).Decode(&dst.S3Connector)
	if err == nil {
		jsonS3Connector, _ := json.Marshal(dst.S3Connector)
		if string(jsonS3Connector) == "{}" { // empty struct
			dst.S3Connector = nil
		} else {
			match++
		}
	} else {
		dst.S3Connector = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AzureConnector = nil
		dst.LocalConnector = nil
		dst.S3Connector = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Connector1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Connector1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Connector1) MarshalJSON() ([]byte, error) {
	if src.AzureConnector != nil {
		return json.Marshal(&src.AzureConnector)
	}

	if src.LocalConnector != nil {
		return json.Marshal(&src.LocalConnector)
	}

	if src.S3Connector != nil {
		return json.Marshal(&src.S3Connector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Connector1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AzureConnector != nil {
		return obj.AzureConnector
	}

	if obj.LocalConnector != nil {
		return obj.LocalConnector
	}

	if obj.S3Connector != nil {
		return obj.S3Connector
	}

	// all schemas are nil
	return nil
}

type NullableConnector1 struct {
	value *Connector1
	isSet bool
}

func (v NullableConnector1) Get() *Connector1 {
	return v.value
}

func (v *NullableConnector1) Set(val *Connector1) {
	v.value = val
	v.isSet = true
}

func (v NullableConnector1) IsSet() bool {
	return v.isSet
}

func (v *NullableConnector1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnector1(val *Connector1) *NullableConnector1 {
	return &NullableConnector1{value: val, isSet: true}
}

func (v NullableConnector1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnector1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


