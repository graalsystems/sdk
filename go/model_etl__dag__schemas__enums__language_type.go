/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// EtlDagSchemasEnumsLanguageType Map the dag input to LanguageType.
type EtlDagSchemasEnumsLanguageType string

// List of etl__dag__schemas__enums__LanguageType
const (
	PYSPARK EtlDagSchemasEnumsLanguageType = "pyspark"
	PANDAS EtlDagSchemasEnumsLanguageType = "pandas"
	JAVA EtlDagSchemasEnumsLanguageType = "java"
	DASK EtlDagSchemasEnumsLanguageType = "dask"
	BEAM EtlDagSchemasEnumsLanguageType = "beam"
	FLINK EtlDagSchemasEnumsLanguageType = "flink"
)

// All allowed values of EtlDagSchemasEnumsLanguageType enum
var AllowedEtlDagSchemasEnumsLanguageTypeEnumValues = []EtlDagSchemasEnumsLanguageType{
	"pyspark",
	"pandas",
	"java",
	"dask",
	"beam",
	"flink",
}

func (v *EtlDagSchemasEnumsLanguageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EtlDagSchemasEnumsLanguageType(value)
	for _, existing := range AllowedEtlDagSchemasEnumsLanguageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EtlDagSchemasEnumsLanguageType", value)
}

// NewEtlDagSchemasEnumsLanguageTypeFromValue returns a pointer to a valid EtlDagSchemasEnumsLanguageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEtlDagSchemasEnumsLanguageTypeFromValue(v string) (*EtlDagSchemasEnumsLanguageType, error) {
	ev := EtlDagSchemasEnumsLanguageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EtlDagSchemasEnumsLanguageType: valid values are %v", v, AllowedEtlDagSchemasEnumsLanguageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EtlDagSchemasEnumsLanguageType) IsValid() bool {
	for _, existing := range AllowedEtlDagSchemasEnumsLanguageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to etl__dag__schemas__enums__LanguageType value
func (v EtlDagSchemasEnumsLanguageType) Ptr() *EtlDagSchemasEnumsLanguageType {
	return &v
}

type NullableEtlDagSchemasEnumsLanguageType struct {
	value *EtlDagSchemasEnumsLanguageType
	isSet bool
}

func (v NullableEtlDagSchemasEnumsLanguageType) Get() *EtlDagSchemasEnumsLanguageType {
	return v.value
}

func (v *NullableEtlDagSchemasEnumsLanguageType) Set(val *EtlDagSchemasEnumsLanguageType) {
	v.value = val
	v.isSet = true
}

func (v NullableEtlDagSchemasEnumsLanguageType) IsSet() bool {
	return v.isSet
}

func (v *NullableEtlDagSchemasEnumsLanguageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtlDagSchemasEnumsLanguageType(val *EtlDagSchemasEnumsLanguageType) *NullableEtlDagSchemasEnumsLanguageType {
	return &NullableEtlDagSchemasEnumsLanguageType{value: val, isSet: true}
}

func (v NullableEtlDagSchemasEnumsLanguageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtlDagSchemasEnumsLanguageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

