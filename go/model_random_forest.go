/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RandomForest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RandomForest{}

// RandomForest Define a logical operator for train a model.  Attributes ---------- type : str     Type of model (Random Forest, ...).  Methods ------- accept(visitor)     Enables the visitor to visit the task.
type RandomForest struct {
	// Random Forest model.
	Model *string `json:"model,omitempty"`
	// Represent the proportion of the dataset to include in the test split. [0, 1.0]
	TestSize float32 `json:"test_size"`
	// The column of the dataset to predict.
	PredictColumn string `json:"predict_column"`
	// The features columns .
	FeaturesColumn []string `json:"features_column"`
	// The number of trees in the forest.
	NumberTrees int32 `json:"number_trees"`
	// The maximum depth of the tree.
	MaxDepth int32 `json:"max_depth"`
	// Seed to set in order to have reproducible results.
	Seed *int32 `json:"seed,omitempty"`
}

type _RandomForest RandomForest

// NewRandomForest instantiates a new RandomForest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomForest(testSize float32, predictColumn string, featuresColumn []string, numberTrees int32, maxDepth int32) *RandomForest {
	this := RandomForest{}
	var model string = "random_forest"
	this.Model = &model
	this.TestSize = testSize
	this.PredictColumn = predictColumn
	this.FeaturesColumn = featuresColumn
	this.NumberTrees = numberTrees
	this.MaxDepth = maxDepth
	var seed int32 = 42
	this.Seed = &seed
	return &this
}

// NewRandomForestWithDefaults instantiates a new RandomForest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomForestWithDefaults() *RandomForest {
	this := RandomForest{}
	var model string = "random_forest"
	this.Model = &model
	var seed int32 = 42
	this.Seed = &seed
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *RandomForest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomForest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *RandomForest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *RandomForest) SetModel(v string) {
	o.Model = &v
}

// GetTestSize returns the TestSize field value
func (o *RandomForest) GetTestSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TestSize
}

// GetTestSizeOk returns a tuple with the TestSize field value
// and a boolean to check if the value has been set.
func (o *RandomForest) GetTestSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestSize, true
}

// SetTestSize sets field value
func (o *RandomForest) SetTestSize(v float32) {
	o.TestSize = v
}

// GetPredictColumn returns the PredictColumn field value
func (o *RandomForest) GetPredictColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PredictColumn
}

// GetPredictColumnOk returns a tuple with the PredictColumn field value
// and a boolean to check if the value has been set.
func (o *RandomForest) GetPredictColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PredictColumn, true
}

// SetPredictColumn sets field value
func (o *RandomForest) SetPredictColumn(v string) {
	o.PredictColumn = v
}

// GetFeaturesColumn returns the FeaturesColumn field value
func (o *RandomForest) GetFeaturesColumn() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FeaturesColumn
}

// GetFeaturesColumnOk returns a tuple with the FeaturesColumn field value
// and a boolean to check if the value has been set.
func (o *RandomForest) GetFeaturesColumnOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeaturesColumn, true
}

// SetFeaturesColumn sets field value
func (o *RandomForest) SetFeaturesColumn(v []string) {
	o.FeaturesColumn = v
}

// GetNumberTrees returns the NumberTrees field value
func (o *RandomForest) GetNumberTrees() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberTrees
}

// GetNumberTreesOk returns a tuple with the NumberTrees field value
// and a boolean to check if the value has been set.
func (o *RandomForest) GetNumberTreesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberTrees, true
}

// SetNumberTrees sets field value
func (o *RandomForest) SetNumberTrees(v int32) {
	o.NumberTrees = v
}

// GetMaxDepth returns the MaxDepth field value
func (o *RandomForest) GetMaxDepth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxDepth
}

// GetMaxDepthOk returns a tuple with the MaxDepth field value
// and a boolean to check if the value has been set.
func (o *RandomForest) GetMaxDepthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxDepth, true
}

// SetMaxDepth sets field value
func (o *RandomForest) SetMaxDepth(v int32) {
	o.MaxDepth = v
}

// GetSeed returns the Seed field value if set, zero value otherwise.
func (o *RandomForest) GetSeed() int32 {
	if o == nil || IsNil(o.Seed) {
		var ret int32
		return ret
	}
	return *o.Seed
}

// GetSeedOk returns a tuple with the Seed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomForest) GetSeedOk() (*int32, bool) {
	if o == nil || IsNil(o.Seed) {
		return nil, false
	}
	return o.Seed, true
}

// HasSeed returns a boolean if a field has been set.
func (o *RandomForest) HasSeed() bool {
	if o != nil && !IsNil(o.Seed) {
		return true
	}

	return false
}

// SetSeed gets a reference to the given int32 and assigns it to the Seed field.
func (o *RandomForest) SetSeed(v int32) {
	o.Seed = &v
}

func (o RandomForest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RandomForest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	toSerialize["test_size"] = o.TestSize
	toSerialize["predict_column"] = o.PredictColumn
	toSerialize["features_column"] = o.FeaturesColumn
	toSerialize["number_trees"] = o.NumberTrees
	toSerialize["max_depth"] = o.MaxDepth
	if !IsNil(o.Seed) {
		toSerialize["seed"] = o.Seed
	}
	return toSerialize, nil
}

func (o *RandomForest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"test_size",
		"predict_column",
		"features_column",
		"number_trees",
		"max_depth",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRandomForest := _RandomForest{}

	err = json.Unmarshal(bytes, &varRandomForest)

	if err != nil {
		return err
	}

	*o = RandomForest(varRandomForest)

	return err
}

type NullableRandomForest struct {
	value *RandomForest
	isSet bool
}

func (v NullableRandomForest) Get() *RandomForest {
	return v.value
}

func (v *NullableRandomForest) Set(val *RandomForest) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomForest) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomForest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomForest(val *RandomForest) *NullableRandomForest {
	return &NullableRandomForest{value: val, isSet: true}
}

func (v NullableRandomForest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomForest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


