/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package graalsystems/sdk

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// PermissionApiService PermissionApi service
type PermissionApiService service

type ApiFindPermissionsRequest struct {
	ctx _context.Context
	ApiService *PermissionApiService
	xTenant *string
	resourceType *string
	resourceId *string
	principalType *string
	principalId *string
}

func (r ApiFindPermissionsRequest) XTenant(xTenant string) ApiFindPermissionsRequest {
	r.xTenant = &xTenant
	return r
}
func (r ApiFindPermissionsRequest) ResourceType(resourceType string) ApiFindPermissionsRequest {
	r.resourceType = &resourceType
	return r
}
func (r ApiFindPermissionsRequest) ResourceId(resourceId string) ApiFindPermissionsRequest {
	r.resourceId = &resourceId
	return r
}
func (r ApiFindPermissionsRequest) PrincipalType(principalType string) ApiFindPermissionsRequest {
	r.principalType = &principalType
	return r
}
func (r ApiFindPermissionsRequest) PrincipalId(principalId string) ApiFindPermissionsRequest {
	r.principalId = &principalId
	return r
}

func (r ApiFindPermissionsRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.FindPermissionsExecute(r)
}

/*
 * FindPermissions Retrieve permissions for a specific principal
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiFindPermissionsRequest
 */
func (a *PermissionApiService) FindPermissions(ctx _context.Context) ApiFindPermissionsRequest {
	return ApiFindPermissionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []string
 */
func (a *PermissionApiService) FindPermissionsExecute(r ApiFindPermissionsRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionApiService.FindPermissions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.principalType == nil {
		return localVarReturnValue, nil, reportError("principalType is required and must be specified")
	}
	if r.principalId == nil {
		return localVarReturnValue, nil, reportError("principalId is required and must be specified")
	}

	localVarQueryParams.Add("resource_type", parameterToString(*r.resourceType, ""))
	localVarQueryParams.Add("resource_id", parameterToString(*r.resourceId, ""))
	localVarQueryParams.Add("principal_type", parameterToString(*r.principalType, ""))
	localVarQueryParams.Add("principal_id", parameterToString(*r.principalId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHasPermissionRequest struct {
	ctx _context.Context
	ApiService *PermissionApiService
	xTenant *string
	resourceType *string
	resourceId *string
	permission *string
}

func (r ApiHasPermissionRequest) XTenant(xTenant string) ApiHasPermissionRequest {
	r.xTenant = &xTenant
	return r
}
func (r ApiHasPermissionRequest) ResourceType(resourceType string) ApiHasPermissionRequest {
	r.resourceType = &resourceType
	return r
}
func (r ApiHasPermissionRequest) ResourceId(resourceId string) ApiHasPermissionRequest {
	r.resourceId = &resourceId
	return r
}
func (r ApiHasPermissionRequest) Permission(permission string) ApiHasPermissionRequest {
	r.permission = &permission
	return r
}

func (r ApiHasPermissionRequest) Execute() (bool, *_nethttp.Response, error) {
	return r.ApiService.HasPermissionExecute(r)
}

/*
 * HasPermission Retrieve permissions for a specific principal
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiHasPermissionRequest
 */
func (a *PermissionApiService) HasPermission(ctx _context.Context) ApiHasPermissionRequest {
	return ApiHasPermissionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return bool
 */
func (a *PermissionApiService) HasPermissionExecute(r ApiHasPermissionRequest) (bool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionApiService.HasPermission")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permissions?metadata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.permission == nil {
		return localVarReturnValue, nil, reportError("permission is required and must be specified")
	}

	localVarQueryParams.Add("resource_type", parameterToString(*r.resourceType, ""))
	localVarQueryParams.Add("resource_id", parameterToString(*r.resourceId, ""))
	localVarQueryParams.Add("permission", parameterToString(*r.permission, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-Tenant"] = parameterToString(*r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
