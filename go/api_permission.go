/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// PermissionAPIService PermissionAPI service
type PermissionAPIService service

type ApiFindPermissionsRequest struct {
	ctx context.Context
	ApiService *PermissionAPIService
	xTenant *string
	resourceType *string
	resourceId *string
	principalType *string
	principalId *string
}

func (r ApiFindPermissionsRequest) XTenant(xTenant string) ApiFindPermissionsRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiFindPermissionsRequest) ResourceType(resourceType string) ApiFindPermissionsRequest {
	r.resourceType = &resourceType
	return r
}

func (r ApiFindPermissionsRequest) ResourceId(resourceId string) ApiFindPermissionsRequest {
	r.resourceId = &resourceId
	return r
}

func (r ApiFindPermissionsRequest) PrincipalType(principalType string) ApiFindPermissionsRequest {
	r.principalType = &principalType
	return r
}

func (r ApiFindPermissionsRequest) PrincipalId(principalId string) ApiFindPermissionsRequest {
	r.principalId = &principalId
	return r
}

func (r ApiFindPermissionsRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.FindPermissionsExecute(r)
}

/*
FindPermissions Retrieve permissions for a specific principal

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindPermissionsRequest
*/
func (a *PermissionAPIService) FindPermissions(ctx context.Context) ApiFindPermissionsRequest {
	return ApiFindPermissionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []string
func (a *PermissionAPIService) FindPermissionsExecute(r ApiFindPermissionsRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionAPIService.FindPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.principalType == nil {
		return localVarReturnValue, nil, reportError("principalType is required and must be specified")
	}
	if r.principalId == nil {
		return localVarReturnValue, nil, reportError("principalId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "principal_type", r.principalType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "principal_id", r.principalId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHasPermissionRequest struct {
	ctx context.Context
	ApiService *PermissionAPIService
	xTenant *string
	resourceType *string
	resourceId *string
	permission *string
}

func (r ApiHasPermissionRequest) XTenant(xTenant string) ApiHasPermissionRequest {
	r.xTenant = &xTenant
	return r
}

func (r ApiHasPermissionRequest) ResourceType(resourceType string) ApiHasPermissionRequest {
	r.resourceType = &resourceType
	return r
}

func (r ApiHasPermissionRequest) ResourceId(resourceId string) ApiHasPermissionRequest {
	r.resourceId = &resourceId
	return r
}

func (r ApiHasPermissionRequest) Permission(permission string) ApiHasPermissionRequest {
	r.permission = &permission
	return r
}

func (r ApiHasPermissionRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.HasPermissionExecute(r)
}

/*
HasPermission Retrieve permissions for a specific principal

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHasPermissionRequest
*/
func (a *PermissionAPIService) HasPermission(ctx context.Context) ApiHasPermissionRequest {
	return ApiHasPermissionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return bool
func (a *PermissionAPIService) HasPermissionExecute(r ApiHasPermissionRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionAPIService.HasPermission")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/permissions?metadata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xTenant == nil {
		return localVarReturnValue, nil, reportError("xTenant is required and must be specified")
	}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceId == nil {
		return localVarReturnValue, nil, reportError("resourceId is required and must be specified")
	}
	if r.permission == nil {
		return localVarReturnValue, nil, reportError("permission is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "permission", r.permission, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Tenant", r.xTenant, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
