/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// WriteTaskParameters - Parameters of the write task.
type WriteTaskParameters struct {
	SaveModelParams *SaveModelParams
	WriteFileParams *WriteFileParams
	WriteSQLParams *WriteSQLParams
}

// SaveModelParamsAsWriteTaskParameters is a convenience function that returns SaveModelParams wrapped in WriteTaskParameters
func SaveModelParamsAsWriteTaskParameters(v *SaveModelParams) WriteTaskParameters {
	return WriteTaskParameters{
		SaveModelParams: v,
	}
}

// WriteFileParamsAsWriteTaskParameters is a convenience function that returns WriteFileParams wrapped in WriteTaskParameters
func WriteFileParamsAsWriteTaskParameters(v *WriteFileParams) WriteTaskParameters {
	return WriteTaskParameters{
		WriteFileParams: v,
	}
}

// WriteSQLParamsAsWriteTaskParameters is a convenience function that returns WriteSQLParams wrapped in WriteTaskParameters
func WriteSQLParamsAsWriteTaskParameters(v *WriteSQLParams) WriteTaskParameters {
	return WriteTaskParameters{
		WriteSQLParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WriteTaskParameters) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SaveModelParams
	err = newStrictDecoder(data).Decode(&dst.SaveModelParams)
	if err == nil {
		jsonSaveModelParams, _ := json.Marshal(dst.SaveModelParams)
		if string(jsonSaveModelParams) == "{}" { // empty struct
			dst.SaveModelParams = nil
		} else {
			match++
		}
	} else {
		dst.SaveModelParams = nil
	}

	// try to unmarshal data into WriteFileParams
	err = newStrictDecoder(data).Decode(&dst.WriteFileParams)
	if err == nil {
		jsonWriteFileParams, _ := json.Marshal(dst.WriteFileParams)
		if string(jsonWriteFileParams) == "{}" { // empty struct
			dst.WriteFileParams = nil
		} else {
			match++
		}
	} else {
		dst.WriteFileParams = nil
	}

	// try to unmarshal data into WriteSQLParams
	err = newStrictDecoder(data).Decode(&dst.WriteSQLParams)
	if err == nil {
		jsonWriteSQLParams, _ := json.Marshal(dst.WriteSQLParams)
		if string(jsonWriteSQLParams) == "{}" { // empty struct
			dst.WriteSQLParams = nil
		} else {
			match++
		}
	} else {
		dst.WriteSQLParams = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SaveModelParams = nil
		dst.WriteFileParams = nil
		dst.WriteSQLParams = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WriteTaskParameters)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WriteTaskParameters)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WriteTaskParameters) MarshalJSON() ([]byte, error) {
	if src.SaveModelParams != nil {
		return json.Marshal(&src.SaveModelParams)
	}

	if src.WriteFileParams != nil {
		return json.Marshal(&src.WriteFileParams)
	}

	if src.WriteSQLParams != nil {
		return json.Marshal(&src.WriteSQLParams)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WriteTaskParameters) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SaveModelParams != nil {
		return obj.SaveModelParams
	}

	if obj.WriteFileParams != nil {
		return obj.WriteFileParams
	}

	if obj.WriteSQLParams != nil {
		return obj.WriteSQLParams
	}

	// all schemas are nil
	return nil
}

type NullableWriteTaskParameters struct {
	value *WriteTaskParameters
	isSet bool
}

func (v NullableWriteTaskParameters) Get() *WriteTaskParameters {
	return v.value
}

func (v *NullableWriteTaskParameters) Set(val *WriteTaskParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteTaskParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteTaskParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteTaskParameters(val *WriteTaskParameters) *NullableWriteTaskParameters {
	return &NullableWriteTaskParameters{value: val, isSet: true}
}

func (v NullableWriteTaskParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteTaskParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


