/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// AdminTarget struct for AdminTarget
type AdminTarget struct {
	Target
	Type *string `json:"type,omitempty"`
}

// NewAdminTarget instantiates a new AdminTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminTarget() *AdminTarget {
	this := AdminTarget{}
	var type_ string = "admin"
	this.Type = &type_
	return &this
}

// NewAdminTargetWithDefaults instantiates a new AdminTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminTargetWithDefaults() *AdminTarget {
	this := AdminTarget{}
	var type_ string = "admin"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AdminTarget) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminTarget) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AdminTarget) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AdminTarget) SetType(v string) {
	o.Type = &v
}

func (o AdminTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTarget, errTarget := json.Marshal(o.Target)
	if errTarget != nil {
		return []byte{}, errTarget
	}
	errTarget = json.Unmarshal([]byte(serializedTarget), &toSerialize)
	if errTarget != nil {
		return []byte{}, errTarget
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAdminTarget struct {
	value *AdminTarget
	isSet bool
}

func (v NullableAdminTarget) Get() *AdminTarget {
	return v.value
}

func (v *NullableAdminTarget) Set(val *AdminTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminTarget(val *AdminTarget) *NullableAdminTarget {
	return &NullableAdminTarget{value: val, isSet: true}
}

func (v NullableAdminTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


