/*
 * Tenant API
 *
 * Tenant API
 *
 * API version: 0.0.1
 * Contact: abc@layer.fr
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// PythonOptionsAllOf struct for PythonOptionsAllOf
type PythonOptionsAllOf struct {
	Type *string `json:"type,omitempty"`
	Module *string `json:"module,omitempty"`
}

// NewPythonOptionsAllOf instantiates a new PythonOptionsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPythonOptionsAllOf() *PythonOptionsAllOf {
	this := PythonOptionsAllOf{}
	var type_ string = "python"
	this.Type = &type_
	return &this
}

// NewPythonOptionsAllOfWithDefaults instantiates a new PythonOptionsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPythonOptionsAllOfWithDefaults() *PythonOptionsAllOf {
	this := PythonOptionsAllOf{}
	var type_ string = "python"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PythonOptionsAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PythonOptionsAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PythonOptionsAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PythonOptionsAllOf) SetType(v string) {
	o.Type = &v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *PythonOptionsAllOf) GetModule() string {
	if o == nil || o.Module == nil {
		var ret string
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PythonOptionsAllOf) GetModuleOk() (*string, bool) {
	if o == nil || o.Module == nil {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *PythonOptionsAllOf) HasModule() bool {
	if o != nil && o.Module != nil {
		return true
	}

	return false
}

// SetModule gets a reference to the given string and assigns it to the Module field.
func (o *PythonOptionsAllOf) SetModule(v string) {
	o.Module = &v
}

func (o PythonOptionsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Module != nil {
		toSerialize["module"] = o.Module
	}
	return json.Marshal(toSerialize)
}

type NullablePythonOptionsAllOf struct {
	value *PythonOptionsAllOf
	isSet bool
}

func (v NullablePythonOptionsAllOf) Get() *PythonOptionsAllOf {
	return v.value
}

func (v *NullablePythonOptionsAllOf) Set(val *PythonOptionsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePythonOptionsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePythonOptionsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePythonOptionsAllOf(val *PythonOptionsAllOf) *NullablePythonOptionsAllOf {
	return &NullablePythonOptionsAllOf{value: val, isSet: true}
}

func (v NullablePythonOptionsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePythonOptionsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


