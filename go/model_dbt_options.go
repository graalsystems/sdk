/*
Tenant API

Tenant API

API version: 0.0.1
Contact: abc@layer.fr
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the DbtOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbtOptions{}

// DbtOptions struct for DbtOptions
type DbtOptions struct {
	Options
	Type *string `json:"type,omitempty"`
	Profile *string `json:"profile,omitempty"`
	Adapter *string `json:"adapter,omitempty"`
}

// NewDbtOptions instantiates a new DbtOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbtOptions() *DbtOptions {
	this := DbtOptions{}
	var type_ string = "dbt"
	this.Type = &type_
	return &this
}

// NewDbtOptionsWithDefaults instantiates a new DbtOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbtOptionsWithDefaults() *DbtOptions {
	this := DbtOptions{}
	var type_ string = "dbt"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DbtOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbtOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DbtOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DbtOptions) SetType(v string) {
	o.Type = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *DbtOptions) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbtOptions) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *DbtOptions) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *DbtOptions) SetProfile(v string) {
	o.Profile = &v
}

// GetAdapter returns the Adapter field value if set, zero value otherwise.
func (o *DbtOptions) GetAdapter() string {
	if o == nil || IsNil(o.Adapter) {
		var ret string
		return ret
	}
	return *o.Adapter
}

// GetAdapterOk returns a tuple with the Adapter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbtOptions) GetAdapterOk() (*string, bool) {
	if o == nil || IsNil(o.Adapter) {
		return nil, false
	}
	return o.Adapter, true
}

// HasAdapter returns a boolean if a field has been set.
func (o *DbtOptions) HasAdapter() bool {
	if o != nil && !IsNil(o.Adapter) {
		return true
	}

	return false
}

// SetAdapter gets a reference to the given string and assigns it to the Adapter field.
func (o *DbtOptions) SetAdapter(v string) {
	o.Adapter = &v
}

func (o DbtOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbtOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedOptions, errOptions := json.Marshal(o.Options)
	if errOptions != nil {
		return map[string]interface{}{}, errOptions
	}
	errOptions = json.Unmarshal([]byte(serializedOptions), &toSerialize)
	if errOptions != nil {
		return map[string]interface{}{}, errOptions
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Adapter) {
		toSerialize["adapter"] = o.Adapter
	}
	return toSerialize, nil
}

type NullableDbtOptions struct {
	value *DbtOptions
	isSet bool
}

func (v NullableDbtOptions) Get() *DbtOptions {
	return v.value
}

func (v *NullableDbtOptions) Set(val *DbtOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDbtOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDbtOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbtOptions(val *DbtOptions) *NullableDbtOptions {
	return &NullableDbtOptions{value: val, isSet: true}
}

func (v NullableDbtOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbtOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


