# coding: utf-8

"""
    Tenant API

    Tenant API

    The version of the OpenAPI document: 0.0.1
    Contact: abc@layer.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import importlib

from datetime import datetime
from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, StrictStr, field_validator
from graalsystems.models.project1 import Project1
from graalsystems.models.reaction import Reaction
from graalsystems.models.user1 import User1
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectActivity(BaseModel):
    """
    Object ProjectActivity.  # noqa: E501
    """
    data: Optional[Union[str, Any]] = None
    id: Optional[StrictStr] = None
    time: Optional[datetime] = None
    reaction_count: Optional[List[Reaction]] = None
    type: Optional[StrictStr] = 'project'
    actor: User1
    target: Project1
    verb: StrictStr
    __properties: ClassVar[List[str]] = ["data", "id", "time", "reaction_count", "type", "actor", "target", "verb"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('project'):
            raise ValueError("must be one of enum values ('project')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reaction_count (list)
        _items = []
        if self.reaction_count:
            for _item in self.reaction_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reaction_count'] = _items
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of ProjectActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": obj.get("data"),
            "id": obj.get("id"),
            "time": obj.get("time"),
            "reaction_count": [Reaction.from_dict(_item) for _item in obj.get("reaction_count")] if obj.get("reaction_count") is not None else None,
            "type": obj.get("type") if obj.get("type") is not None else 'project',
            "actor": User1.from_dict(obj.get("actor")) if obj.get("actor") is not None else None,
            "target": Project1.from_dict(obj.get("target")) if obj.get("target") is not None else None,
            "verb": obj.get("verb")
        })
        return _obj


