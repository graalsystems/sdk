# coding: utf-8

"""
    Tenant API

    Tenant API

    The version of the OpenAPI document: 0.0.1
    Contact: abc@layer.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import importlib


from typing import Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SQLDataWriter(BaseModel):
    """
    SQLDataWriter
    """
    url: StrictStr = Field(description="URL to connect to the SQL server.")
    port: Optional[StrictStr] = Field(default='5432', description="Port to connect to the SQL server.")
    db: StrictStr = Field(description="Name of the database in the SQL server.")
    schema_db: Optional[StrictStr] = Field(default='public', description="Logical structure defining the organization,         relationships, and attributes of the database. The public schema is the         default schema where all the new tables are created.")
    table: StrictStr = Field(description="Name of the table in the database.")
    user: StrictStr = Field(description="Username to connect to the SQL server.")
    password: StrictStr = Field(description="Password to connect to the SQL server.")
    type: Optional[StrictStr] = Field(default='jdbc', description="Type of database connection")
    __properties: ClassVar[List[str]] = ["url", "port", "db", "schema_db", "table", "user", "password", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('jdbc'):
            raise ValueError("must be one of enum values ('jdbc')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SQLDataWriter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of SQLDataWriter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "port": obj.get("port") if obj.get("port") is not None else '5432',
            "db": obj.get("db"),
            "schema_db": obj.get("schema_db") if obj.get("schema_db") is not None else 'public',
            "table": obj.get("table"),
            "user": obj.get("user"),
            "password": obj.get("password"),
            "type": obj.get("type") if obj.get("type") is not None else 'jdbc'
        })
        return _obj


