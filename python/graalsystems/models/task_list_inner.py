# coding: utf-8

"""
    Tenant API

    Tenant API

    The version of the OpenAPI document: 0.0.1
    Contact: abc@layer.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from graalsystems.models.agg_task import AggTask
from graalsystems.models.distinct_task import DistinctTask
from graalsystems.models.drop_task import DropTask
from graalsystems.models.filter_task import FilterTask
from graalsystems.models.join_task import JoinTask
from graalsystems.models.order_task import OrderTask
from graalsystems.models.predict_model_task import PredictModelTask
from graalsystems.models.print_task import PrintTask
from graalsystems.models.read_task import ReadTask
from graalsystems.models.rename_task import RenameTask
from graalsystems.models.train_model_task import TrainModelTask
from graalsystems.models.write_task import WriteTask
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

TASKLISTINNER_ONE_OF_SCHEMAS = ["AggTask", "DistinctTask", "DropTask", "FilterTask", "JoinTask", "OrderTask", "PredictModelTask", "PrintTask", "ReadTask", "RenameTask", "TrainModelTask", "WriteTask"]

class TaskListInner(BaseModel):
    """
    TaskListInner
    """
    # data type: AggTask
    oneof_schema_1_validator: Optional[AggTask] = None
    # data type: DistinctTask
    oneof_schema_2_validator: Optional[DistinctTask] = None
    # data type: DropTask
    oneof_schema_3_validator: Optional[DropTask] = None
    # data type: FilterTask
    oneof_schema_4_validator: Optional[FilterTask] = None
    # data type: JoinTask
    oneof_schema_5_validator: Optional[JoinTask] = None
    # data type: OrderTask
    oneof_schema_6_validator: Optional[OrderTask] = None
    # data type: ReadTask
    oneof_schema_7_validator: Optional[ReadTask] = None
    # data type: RenameTask
    oneof_schema_8_validator: Optional[RenameTask] = None
    # data type: TrainModelTask
    oneof_schema_9_validator: Optional[TrainModelTask] = None
    # data type: WriteTask
    oneof_schema_10_validator: Optional[WriteTask] = None
    # data type: PredictModelTask
    oneof_schema_11_validator: Optional[PredictModelTask] = None
    # data type: PrintTask
    oneof_schema_12_validator: Optional[PrintTask] = None
    actual_instance: Optional[Union[AggTask, DistinctTask, DropTask, FilterTask, JoinTask, OrderTask, PredictModelTask, PrintTask, ReadTask, RenameTask, TrainModelTask, WriteTask]] = None
    one_of_schemas: List[str] = Literal["AggTask", "DistinctTask", "DropTask", "FilterTask", "JoinTask", "OrderTask", "PredictModelTask", "PrintTask", "ReadTask", "RenameTask", "TrainModelTask", "WriteTask"]

    model_config = {
        "validate_assignment": True
    }


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = TaskListInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: AggTask
        if not isinstance(v, AggTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AggTask`")
        else:
            match += 1
        # validate data type: DistinctTask
        if not isinstance(v, DistinctTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DistinctTask`")
        else:
            match += 1
        # validate data type: DropTask
        if not isinstance(v, DropTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropTask`")
        else:
            match += 1
        # validate data type: FilterTask
        if not isinstance(v, FilterTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FilterTask`")
        else:
            match += 1
        # validate data type: JoinTask
        if not isinstance(v, JoinTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JoinTask`")
        else:
            match += 1
        # validate data type: OrderTask
        if not isinstance(v, OrderTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrderTask`")
        else:
            match += 1
        # validate data type: ReadTask
        if not isinstance(v, ReadTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ReadTask`")
        else:
            match += 1
        # validate data type: RenameTask
        if not isinstance(v, RenameTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RenameTask`")
        else:
            match += 1
        # validate data type: TrainModelTask
        if not isinstance(v, TrainModelTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TrainModelTask`")
        else:
            match += 1
        # validate data type: WriteTask
        if not isinstance(v, WriteTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WriteTask`")
        else:
            match += 1
        # validate data type: PredictModelTask
        if not isinstance(v, PredictModelTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PredictModelTask`")
        else:
            match += 1
        # validate data type: PrintTask
        if not isinstance(v, PrintTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrintTask`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in TaskListInner with oneOf schemas: AggTask, DistinctTask, DropTask, FilterTask, JoinTask, OrderTask, PredictModelTask, PrintTask, ReadTask, RenameTask, TrainModelTask, WriteTask. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in TaskListInner with oneOf schemas: AggTask, DistinctTask, DropTask, FilterTask, JoinTask, OrderTask, PredictModelTask, PrintTask, ReadTask, RenameTask, TrainModelTask, WriteTask. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AggTask
        try:
            instance.actual_instance = AggTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DistinctTask
        try:
            instance.actual_instance = DistinctTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropTask
        try:
            instance.actual_instance = DropTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FilterTask
        try:
            instance.actual_instance = FilterTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JoinTask
        try:
            instance.actual_instance = JoinTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrderTask
        try:
            instance.actual_instance = OrderTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ReadTask
        try:
            instance.actual_instance = ReadTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RenameTask
        try:
            instance.actual_instance = RenameTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TrainModelTask
        try:
            instance.actual_instance = TrainModelTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WriteTask
        try:
            instance.actual_instance = WriteTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PredictModelTask
        try:
            instance.actual_instance = PredictModelTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrintTask
        try:
            instance.actual_instance = PrintTask.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into TaskListInner with oneOf schemas: AggTask, DistinctTask, DropTask, FilterTask, JoinTask, OrderTask, PredictModelTask, PrintTask, ReadTask, RenameTask, TrainModelTask, WriteTask. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into TaskListInner with oneOf schemas: AggTask, DistinctTask, DropTask, FilterTask, JoinTask, OrderTask, PredictModelTask, PrintTask, ReadTask, RenameTask, TrainModelTask, WriteTask. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


