# coding: utf-8

"""
    Tenant API

    Tenant API

    The version of the OpenAPI document: 0.0.1
    Contact: abc@layer.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import importlib


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RandomForest(BaseModel):
    """
    Define a logical operator for train a model.  Attributes ---------- type : str     Type of model (Random Forest, ...).  Methods ------- accept(visitor)     Enables the visitor to visit the task.  # noqa: E501
    """
    model: Optional[StrictStr] = Field(default='random_forest', description="Random Forest model.")
    test_size: Union[StrictFloat, StrictInt] = Field(description="Represent the proportion of the dataset to include in the test split. [0, 1.0]")
    predict_column: StrictStr = Field(description="The column of the dataset to predict.")
    features_column: List[StrictStr] = Field(description="The features columns .")
    number_trees: StrictInt = Field(description="The number of trees in the forest.")
    max_depth: StrictInt = Field(description="The maximum depth of the tree.")
    seed: Optional[StrictInt] = Field(default=42, description="Seed to set in order to have reproducible results.")
    __properties: ClassVar[List[str]] = ["model", "test_size", "predict_column", "features_column", "number_trees", "max_depth", "seed"]

    @field_validator('model')
    def model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('random_forest'):
            raise ValueError("must be one of enum values ('random_forest')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RandomForest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of RandomForest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": obj.get("model") if obj.get("model") is not None else 'random_forest',
            "test_size": obj.get("test_size"),
            "predict_column": obj.get("predict_column"),
            "features_column": obj.get("features_column"),
            "number_trees": obj.get("number_trees"),
            "max_depth": obj.get("max_depth"),
            "seed": obj.get("seed") if obj.get("seed") is not None else 42
        })
        return _obj


