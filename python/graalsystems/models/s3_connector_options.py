# coding: utf-8

"""
    Tenant API

    Tenant API

    The version of the OpenAPI document: 0.0.1
    Contact: abc@layer.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import importlib


from typing import Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class S3ConnectorOptions(BaseModel):
    """
    Options to connect to a S3 bucket.  Attributes ---------- bucket : str     Bucket name. access_key : str     Access key for S3. secret_key : str     Secret key for S3. session_token : str     Session token for S3. endpoint : str     URL endpoint.  # noqa: E501
    """
    bucket: StrictStr = Field(description="The bucket to be connected to.")
    access_key: StrictStr = Field(description="S3 access key to access to AWS.")
    secret_key: StrictStr = Field(description="S3 secret key to access to AWS.")
    session_token: Optional[StrictStr] = Field(default=None, description="S3 session token to access to AWS.")
    endpoint: Optional[StrictStr] = Field(default=None, description="The endpoint to be connected to.")
    region_name: Optional[StrictStr] = Field(default=None, description="The region of the endpoint.")
    __properties: ClassVar[List[str]] = ["bucket", "access_key", "secret_key", "session_token", "endpoint", "region_name"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of S3ConnectorOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of S3ConnectorOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket": obj.get("bucket"),
            "access_key": obj.get("access_key"),
            "secret_key": obj.get("secret_key"),
            "session_token": obj.get("session_token"),
            "endpoint": obj.get("endpoint"),
            "region_name": obj.get("region_name")
        })
        return _obj


