# coding: utf-8

"""
    Tenant API

    Tenant API

    The version of the OpenAPI document: 0.0.1
    Contact: abc@layer.fr
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import importlib


from typing import List
from pydantic import BaseModel, StrictStr
from pydantic import Field
from graalsystems.models.task_list_inner import TaskListInner
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DagUnverified(BaseModel):
    """
    Creates a DAG (Directed Acyclic Graph) from a JSON file.  Attributes ---------- id : str     Identifier of the DAG. tasks : ListIntVisited     Tasks that make up the DAG.  Methods ------- check_dependencies(tasks)     Checks if the tasks dependencies are valid. check_circle(tasks)     Checks that there are no circular dependencies in the DAG. get_zipped_code(language: LanguageType)     Returns the requirements and code in a zipped folder. get_nodes(tasks)     Returns all the information of the DAG as a list of tasks. get_edges(tasks)     Get all two-by-two dependencies between tasks. to_graph(tasks)     Create a graph from the DAG with the edges and nodes.  # noqa: E501
    """
    id: StrictStr = Field(description="Identifier of the Directed Acyclic Graph (DAG).")
    tasks: List[TaskListInner] = Field(description="List of tasks that compose the DAG.")
    __properties: ClassVar[List[str]] = ["id", "tasks"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DagUnverified from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item in self.tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of DagUnverified from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "tasks": [TaskListInner.from_dict(_item) for _item in obj.get("tasks")] if obj.get("tasks") is not None else None
        })
        return _obj


